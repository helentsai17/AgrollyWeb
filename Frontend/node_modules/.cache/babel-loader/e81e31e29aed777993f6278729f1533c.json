{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/riskManagement/vegetableCard.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nexport default class VegetableCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      crop_name: props.vege.Crop_English,\n      Crop_Mongolian_name: props.vege.Crop_Mongolian,\n      Crop_Portuguese_name: props.vege.Crop_Portuguese,\n      Max_temp: props.vege.Geral_air_Temp_max,\n      Min_temp: props.vege.Geral_air_Temp_min,\n      growPeriod_Max: props.vege[\"Total.growing.period_days_max\"],\n      growPeriod_Min: props.vege[\"Total.growing.period_days_min\"],\n      cover: props.vege.Cover,\n      kc_month1: props.vege.kc_month1,\n      avg1: props.avg1,\n      avg2: props.avg2,\n      avg3: props.avg3,\n      avg4: props.avg4,\n      avg5: props.avg5,\n      avg6: props.avg6,\n      avg7: props.avg7,\n      avg8: props.avg8,\n      avg9: props.avg9,\n      avg10: props.avg10,\n      avg11: props.avg11,\n      avg12: props.avg12,\n      selectMount: props.selectMount,\n      placedata: props.placedata,\n      citydata: props.citydata,\n      CityCode: props.CityCode,\n      po_place: props.po_place,\n      weatherdata: []\n    };\n  }\n\n  ETCrop() {\n    const mountparam = this.GetplaceMonth();\n    const startmonth = \"avg\" + this.state.selectMount;\n    const avaragetemp = this.state[startmonth];\n    console.log(startmonth); // console.log(avaragetemp)\n\n    const vegedata = this.state.kc_month1; // console.log(vegedata)\n    // console.log(mountparam)\n\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30;\n    Math.floor(Irrigation); // console.log(Irrigation);\n\n    return Irrigation;\n  } // first parameter \n\n\n  GetplaceMonth() {\n    const NorS = this.state.po_place.charAt(0);\n    console.log(NorS);\n    const themonth = this.state.selectMount;\n    const search = NorS + \"_\" + themonth;\n    const placeCode = this.state.citydata[search]; // console.log(placeCode)\n\n    return placeCode;\n  } // ET crop selected month=   (pplace+month // selected the month and find in the long  (0.46 T2M selected month/place   // annual weather focast + 8) × Kccrop/1st number. //kc_month1: 0.45 for the first mont  (mm/day))*30\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, this.state.crop_name, \" | \", this.state.Crop_Portuguese_name, \" | \", this.state.Crop_Mongolian_name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, \"possible tolerant temperature: \", this.state.Min_temp, \".C~\", this.state.Max_temp, \".C \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, \"growing Period: \", this.state.growPeriod_Min, \"~\", this.state.growPeriod_Max), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, \"Cover: \", this.state.cover), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, this.state.cityCode), this.ETCrop());\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/riskManagement/vegetableCard.js"],"names":["React","Component","axios","VegetableCard","constructor","props","state","crop_name","vege","Crop_English","Crop_Mongolian_name","Crop_Mongolian","Crop_Portuguese_name","Crop_Portuguese","Max_temp","Geral_air_Temp_max","Min_temp","Geral_air_Temp_min","growPeriod_Max","growPeriod_Min","cover","Cover","kc_month1","avg1","avg2","avg3","avg4","avg5","avg6","avg7","avg8","avg9","avg10","avg11","avg12","selectMount","placedata","citydata","CityCode","po_place","weatherdata","ETCrop","mountparam","GetplaceMonth","startmonth","avaragetemp","console","log","vegedata","Irrigation","Math","floor","NorS","charAt","themonth","search","placeCode","render","cityCode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\n\n\n\n\n\nexport default class VegetableCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            crop_name: props.vege.Crop_English,\n            Crop_Mongolian_name: props.vege.Crop_Mongolian,\n            Crop_Portuguese_name: props.vege.Crop_Portuguese,\n            Max_temp: props.vege.Geral_air_Temp_max,\n            Min_temp: props.vege.Geral_air_Temp_min,\n            growPeriod_Max: props.vege[\"Total.growing.period_days_max\"],\n            growPeriod_Min: props.vege[\"Total.growing.period_days_min\"],\n            cover: props.vege.Cover,\n            kc_month1: props.vege.kc_month1,\n            avg1: props.avg1,\n            avg2: props.avg2,\n            avg3: props.avg3,\n            avg4: props.avg4,\n            avg5: props.avg5,\n            avg6: props.avg6,\n            avg7: props.avg7,\n            avg8: props.avg8,\n            avg9: props.avg9,\n            avg10: props.avg10,\n            avg11: props.avg11,\n            avg12: props.avg12,\n            selectMount:props.selectMount,\n            placedata:props.placedata,\n            citydata: props.citydata,\n            CityCode: props.CityCode,\n            po_place:props.po_place,\n            weatherdata: [],\n        }\n    }\n\n \n\n    ETCrop() {\n        const mountparam = this.GetplaceMonth()\n        const startmonth = \"avg\"+this.state.selectMount\n        const avaragetemp = this.state[startmonth]\n        console.log(startmonth)\n\n        // console.log(avaragetemp)\n        const vegedata = this.state.kc_month1\n        // console.log(vegedata)\n        // console.log(mountparam)\n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        Math.floor(Irrigation)\n        // console.log(Irrigation);\n        return Irrigation\n    }\n\n    // first parameter \n    GetplaceMonth() {\n        const NorS = this.state.po_place.charAt(0)\n        console.log(NorS)\n        const themonth = this.state.selectMount\n        const search = NorS+\"_\" + themonth\n        const placeCode = this.state.citydata[search]\n        // console.log(placeCode)\n        return placeCode\n    }\n\n\n\n    // ET crop selected month=   (pplace+month // selected the month and find in the long  (0.46 T2M selected month/place   // annual weather focast + 8) × Kccrop/1st number. //kc_month1: 0.45 for the first mont  (mm/day))*30\n\n\n\n    render() {\n        return (\n            <div>\n                <h5>{this.state.crop_name} | {this.state.Crop_Portuguese_name} | {this.state.Crop_Mongolian_name}</h5>\n                <p>possible tolerant temperature: {this.state.Min_temp}.C~{this.state.Max_temp}.C </p>\n                <p>growing Period: {this.state.growPeriod_Min}~{this.state.growPeriod_Max}</p>\n                <p>Cover: {this.state.cover}</p>\n                <p>{this.state.cityCode}</p>\n                {this.ETCrop()}\n\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}