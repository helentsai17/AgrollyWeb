{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/weatherPage/hourlyweather.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport hourlyCard from './hourlyCard';\nexport default class hourlyweather extends Component {\n  constructor(props) {\n    super(props); // App State\n\n    this.state = {\n      lat: 0,\n      lng: 0,\n      IBMdata: []\n    };\n  }\n\n  componentDidMount() {\n    // Get location of user\n    const success = position => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      console.log(latitude, longitude);\n      this.setState({\n        lat: latitude.toFixed(4),\n        lng: longitude.toFixed(4)\n      });\n    };\n\n    const error = () => {\n      console.log(\"Unable to retrieve your location\");\n    };\n\n    navigator.geolocation.getCurrentPosition(success, error);\n    const languageList = \"en-US\";\n    const APIkey = \"da328055e2e940d8b28055e2e9e0d851\";\n    axios.get('https://api.weather.com/v1/geocode/' + this.state.lat + '/' + this.state.lng + '/forecast/intraday/3day.json?units=m&language=' + languageList + '&apiKey=' + APIkey).then(response => {\n      // console.log(response.data.forecasts)\n      this.setState({\n        IBMdata: response.data.forecasts\n      });\n    });\n  }\n\n  hourlyweatherList() {\n    return this.state.IBMdata.map((weatherdata, index) => {\n      console.log(weatherdata);\n      return /*#__PURE__*/React.createElement(\"hourlyCard\", {\n        key: index,\n        hourly: weatherdata,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  MyQuestionList() {\n    return this.state.question.map((currentqustion, index) => {\n      console.log(currentqustion);\n\n      if (currentqustion.date !== undefined) {\n        return /*#__PURE__*/React.createElement(QuestionCard, {\n          key: index,\n          question: currentqustion,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 24\n          }\n        });\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, this.hourlyweatherList(), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, this.state.lng), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, this.state.lat));\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/weatherPage/hourlyweather.js"],"names":["axios","React","Component","hourlyCard","hourlyweather","constructor","props","state","lat","lng","IBMdata","componentDidMount","success","position","latitude","coords","longitude","console","log","setState","toFixed","error","navigator","geolocation","getCurrentPosition","languageList","APIkey","get","then","response","data","forecasts","hourlyweatherList","map","weatherdata","index","MyQuestionList","question","currentqustion","date","undefined","render"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport React, { Component } from 'react';\nimport hourlyCard from './hourlyCard'\n\n\n\nexport default class hourlyweather extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // App State\n        this.state = {\n            lat: 0,\n            lng: 0,\n            IBMdata: []\n        }\n    };\n\n    componentDidMount() {\n        // Get location of user\n        const success = position => {\n            const latitude = position.coords.latitude;\n            const longitude = position.coords.longitude;\n            console.log(latitude, longitude);\n            this.setState({\n                lat: latitude.toFixed(4),\n                lng: longitude.toFixed(4)\n            });\n        };\n        const error = () => {\n            console.log(\"Unable to retrieve your location\");\n        };\n        navigator.geolocation.getCurrentPosition(success, error);\n\n        const languageList = \"en-US\"\n        const APIkey = \"da328055e2e940d8b28055e2e9e0d851\"\n        axios.get('https://api.weather.com/v1/geocode/' + this.state.lat + '/' + this.state.lng + '/forecast/intraday/3day.json?units=m&language=' + languageList + '&apiKey=' + APIkey)\n            .then(response => {\n                // console.log(response.data.forecasts)\n                this.setState({ IBMdata: response.data.forecasts })\n            })\n    }\n\n    hourlyweatherList(){\n        return this.state.IBMdata.map((weatherdata, index) =>{\n            console.log(weatherdata)\n           return  <hourlyCard key={index} hourly={weatherdata}  />\n        })\n        \n    }\n\n    MyQuestionList() {\n\n        return this.state.question.map((currentqustion, index) => {\n            console.log(currentqustion)\n            if(currentqustion.date !== undefined){\n                return <QuestionCard key={index} question={currentqustion} />\n            }\n            \n        });\n    }\n\n    \n\n\n    render() {\n        return (\n            <div>\n                {this.hourlyweatherList()}\n                <div>{this.state.lng}</div>\n                <div>{this.state.lat}</div>\n               \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}