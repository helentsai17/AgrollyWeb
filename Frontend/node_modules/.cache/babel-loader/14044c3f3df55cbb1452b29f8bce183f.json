{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/riskManagement/riskpage.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport VegetablesCard from './vegetableCard';\nexport default class riskpage extends Component {\n  constructor(props) {\n    super(props);\n    const state = this.props.location.state.detail;\n    this.state = {\n      month: state.month,\n      po_place: state.po_place,\n      CityCode: state.CityCode,\n      vegetables: [],\n      allcityLong: [],\n      citydata: [],\n      weatherdata: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://www.agrolly.tech/po_value.php').then(res => {\n      // console.log(res.data)\n      const po = res.data;\n      this.setState({\n        allcityLong: po\n      });\n      this.findcityLong();\n    }).catch(error => {\n      console.log(error);\n    }); //get crop detail\n\n    axios.get('http://www.agrolly.tech/cropdata.php').then(res => {\n      // console.log(res.data)\n      const vegetables = res.data;\n      this.setState({\n        vegetables: vegetables\n      });\n    }).catch(error => {\n      console.log('error come from get crop api: ' + error);\n    });\n    axios.get('http://agrolly.tech/annualForecast.php?country=Brazil').then(responsedata => {\n      // console.log(responsedata)\n      const weatherdata = responsedata.data;\n      this.setState({\n        weatherdata: weatherdata\n      });\n    }); // {this.AverageTemp()}\n  }\n\n  findcityLong() {\n    const long = this.state.po_place.slice(2); // const NorS = this.state.po_place.subString(0)\n\n    return this.state.allcityLong.filter(citylong => {\n      if (citylong.city_long === long) {\n        // console.log(citylong)\n        this.setState({\n          citydata: citylong\n        });\n      }\n    });\n  }\n\n  vegetablesList() {\n    return this.state.vegetables.map((vege, index) => {\n      return /*#__PURE__*/React.createElement(VegetablesCard, {\n        key: index,\n        vege: vege,\n        cityPo: this.state.po_place,\n        selectMount: this.state.month,\n        citydata: this.state.citydata,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  AverageTemp() {\n    let theMonth = this.state.month;\n\n    if (theMonth < 10) {\n      theMonth = \"0\" + theMonth;\n    }\n\n    return this.state.weatherdata.map(data => {\n      const date = data[\"Date.fcst\"]; // console.log(date)\n\n      const AVAtemperature = \"TEMPMEDIA_fcast_\" + this.state.CityCode; // console.log(data[AVAtemperature])\n\n      if (date.substring(5, 7).includes(theMonth)) {\n        console.log(data);\n        console.log(data[AVAtemperature]);\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, this.vegetablesList(), this.AverageTemp());\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/riskManagement/riskpage.js"],"names":["React","Component","axios","VegetablesCard","riskpage","constructor","props","state","location","detail","month","po_place","CityCode","vegetables","allcityLong","citydata","weatherdata","componentDidMount","get","then","res","po","data","setState","findcityLong","catch","error","console","log","responsedata","long","slice","filter","citylong","city_long","vegetablesList","map","vege","index","AverageTemp","theMonth","date","AVAtemperature","substring","includes","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport VegetablesCard from './vegetableCard'\n\n\n\n\nexport default class riskpage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const state = this.props.location.state.detail;\n\n        this.state = {\n            month: state.month,\n            po_place: state.po_place,\n            CityCode: state.CityCode,\n\n            vegetables: [],\n            allcityLong: [],\n            citydata: [],\n\n            weatherdata: []\n        }\n\n    }\n\n    componentDidMount() {\n        axios.get('http://www.agrolly.tech/po_value.php')\n            .then(res => {\n                // console.log(res.data)\n                const po = res.data\n                this.setState({ allcityLong: po })\n                this.findcityLong()\n            }).catch(error => {\n                console.log(error)\n            })\n\n        //get crop detail\n        axios.get('http://www.agrolly.tech/cropdata.php')\n            .then(res => {\n                // console.log(res.data)\n                const vegetables = res.data\n                this.setState({ vegetables: vegetables })\n            })\n            .catch(error => {\n                console.log('error come from get crop api: ' + error)\n            })\n        axios.get('http://agrolly.tech/annualForecast.php?country=Brazil')\n            .then(responsedata => {\n                // console.log(responsedata)\n                const weatherdata = responsedata.data\n                this.setState({ weatherdata: weatherdata })\n            })\n        // {this.AverageTemp()}\n    }\n\n\n    findcityLong() {\n        const long = this.state.po_place.slice(2)\n        // const NorS = this.state.po_place.subString(0)\n        return this.state.allcityLong.filter(citylong => {\n            if (citylong.city_long === long) {\n                // console.log(citylong)\n                this.setState({ citydata: citylong })\n            }\n        })\n    }\n\n    vegetablesList() {\n        return this.state.vegetables.map((vege, index) => {\n            return <VegetablesCard\n                key={index}\n                vege={vege}\n                cityPo={this.state.po_place}\n                selectMount={this.state.month}\n                citydata={this.state.citydata} />\n        })\n    }\n\n    AverageTemp() {\n\n        let theMonth = this.state.month\n            if(theMonth<10){\n                theMonth = \"0\"+theMonth\n            }\n        return this.state.weatherdata.map(data => {\n            const date = data[\"Date.fcst\"]\n            // console.log(date)\n            const AVAtemperature = \"TEMPMEDIA_fcast_\" + this.state.CityCode\n            // console.log(data[AVAtemperature])\n            if(date.substring(5, 7).includes(theMonth)){\n                console.log(data)\n                console.log(data[AVAtemperature])\n            }\n        })\n\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                {this.vegetablesList()}\n                {this.AverageTemp()}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}