{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/weatherPage/annualpage.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport style from './weatherpage.module.css';\nimport WeatherCard from './weathercardAnnual';\nexport default class Annualpage extends Component {\n  constructor(props) {\n    super(props);\n    var token = localStorage.getItem('usertoken');\n    var localdata = JSON.parse(token);\n    this.OnChangeState = this.OnChangeState.bind(this);\n    this.OnChnageCity = this.OnChnageCity.bind(this);\n    this.OnChnageMonth = this.OnChnageMonth.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      Country: '',\n      // State: localdata.state,\n      city: '',\n      getcitiescode: [],\n      currentcitycode: '',\n      weatherdata: [],\n      MonthinYear: [],\n      month: \"\"\n    }; // console.log(this.state.city)\n  }\n\n  componentDidMount() {\n    var token = localStorage.getItem('usertoken');\n    var localdata = JSON.parse(token);\n    this.setState({\n      city: localdata.city\n    });\n    axios.get('http://agrolly.tech/get_cities.php').then(response => {\n      const getcities = response.data; // console.log(getcities)\n\n      this.setState({\n        getcitiescode: getcities\n      });\n      this.getCityName();\n      this.getCityCode();\n    }).catch(error => {\n      console.log(\"error from get cities: \" + error);\n    });\n    axios.get('http://agrolly.tech/annualForecast.php?country=Brazil').then(response => {\n      // console.log(response.data)\n      const weatherdata = response.data;\n      this.setState({\n        weatherdata: weatherdata\n      });\n      this.getMonth();\n    }).catch(error => {\n      console.log(\"error from get cities: \" + error);\n    });\n  }\n\n  getCityName() {\n    this.state.getcitiescode.map(currentcity => {\n      // console.log(currentcity.City)\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: currentcity.City,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 19\n        }\n      }, currentcity.City);\n    });\n  }\n\n  getMonth() {\n    this.state.weatherdata.map(data => {\n      const themonth = data[\"Date.fcst\"]; // console.log(themonth.substring(0, 7))\n\n      if (!this.state.MonthinYear.includes(themonth.substring(0, 7))) {\n        this.state.MonthinYear.push(themonth.substring(0, 7));\n      }\n    });\n  }\n\n  getCityCode() {\n    this.state.getcitiescode.map(currentcity => {\n      if (currentcity.City == this.state.city) {\n        const currentcitycode = currentcity.Code; // console.log(currentcitycode)\n\n        this.setState({\n          currentcitycode: currentcitycode\n        });\n      }\n    });\n  }\n\n  WeatherList() {\n    const filtermonth = this.state.weatherdata.filter(findmonth => {\n      console.log(findmonth[\"Date.fcst\"].includes(this.state.month));\n      return findmonth[\"Date.fcst\"].includes(this.state.month);\n    });\n    return filtermonth.map((data, index) => {\n      const citycode = this.state.currentcitycode;\n      const MAXtemperature = \"TEMPMAX_fcast_\" + citycode;\n      const MINtemperature = \"TEMPMIN_fcast_\" + citycode; // const AVAtemperature = \"TEMPMEDIA_fcast_\" + citycode\n\n      const rainfall = \"fcast_class_\" + citycode;\n      const rainorno = \"rained_\" + citycode + \"_yN\";\n      const icon = \"icon_\" + citycode; // console.log(data[\"Date.fcst\"])\n\n      return /*#__PURE__*/React.createElement(WeatherCard, {\n        key: index,\n        data: data,\n        MAXtemperature: data[MAXtemperature],\n        MINtemperature: data[MINtemperature],\n        rainfall: data[rainfall],\n        rainorno: data[rainorno],\n        icon: data[icon],\n        dateinyear: data[\"Date.fcst\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  OnChnageMonth(e) {\n    this.setState({\n      month: e.target.value\n    });\n  }\n\n  OnChangeState(e) {\n    this.setState({\n      state: e.target.value\n    });\n  }\n\n  OnChnageCity(e) {\n    this.setState({\n      city: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    console.log(this.state.month);\n    console.log(this.state.city);\n    this.getCityCode();\n    this.WeatherList();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }, this.getMonth(), /*#__PURE__*/React.createElement(\"div\", {\n      className: style.formStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"input-group-text\",\n      htmlFor: \"inputTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 33\n      }\n    }, \"Month\")), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"custom-select\",\n      id: \"inputTime\",\n      value: this.state.month,\n      onChange: this.OnChnageMonth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 33\n      }\n    }, \"Choose...\"), this.state.MonthinYear.map(month => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: month,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 81\n        }\n      }, month);\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"input-group-text\",\n      htmlFor: \"inputCity\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 33\n      }\n    }, \"City\")), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"custom-select\",\n      id: \"inputCity\",\n      value: this.state.city,\n      onChange: this.OnChnageCity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 33\n      }\n    }, \"Choose...\"), this.state.getcitiescode.map(allcity => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: allcity.City,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 85\n        }\n      }, allcity.City);\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"search\",\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    }, \"current city data\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }, this.WeatherList()));\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/weatherPage/annualpage.js"],"names":["React","Component","axios","style","WeatherCard","Annualpage","constructor","props","token","localStorage","getItem","localdata","JSON","parse","OnChangeState","bind","OnChnageCity","OnChnageMonth","onSubmit","state","Country","city","getcitiescode","currentcitycode","weatherdata","MonthinYear","month","componentDidMount","setState","get","then","response","getcities","data","getCityName","getCityCode","catch","error","console","log","getMonth","map","currentcity","City","themonth","includes","substring","push","Code","WeatherList","filtermonth","filter","findmonth","index","citycode","MAXtemperature","MINtemperature","rainfall","rainorno","icon","e","target","value","preventDefault","render","formStyle","allcity"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport style from './weatherpage.module.css'\nimport WeatherCard from './weathercardAnnual'\n\n\n\nexport default class Annualpage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        var token = localStorage.getItem('usertoken');\n        var localdata = JSON.parse(token)\n\n        \n        this.OnChangeState = this.OnChangeState.bind(this)\n        this.OnChnageCity = this.OnChnageCity.bind(this)\n        this.OnChnageMonth = this.OnChnageMonth.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n\n        this.state = {\n            Country: '',\n            // State: localdata.state,\n            city:'',\n            getcitiescode: [],\n            currentcitycode: '',\n            weatherdata: [],\n            MonthinYear:[],\n            month:\"\",\n        }\n        // console.log(this.state.city)\n\n    }\n\n    componentDidMount() {\n\n        var token = localStorage.getItem('usertoken');\n        var localdata = JSON.parse(token)\n        this.setState({city:localdata.city})\n\n        axios.get('http://agrolly.tech/get_cities.php')\n            .then(response => {\n                const getcities = response.data\n                // console.log(getcities)\n                this.setState({ getcitiescode: getcities })\n                this.getCityName();\n                this.getCityCode();\n                \n                \n            }).catch((error) => {\n                console.log(\"error from get cities: \" + error)\n            })\n\n            \n        axios.get('http://agrolly.tech/annualForecast.php?country=Brazil')\n            .then(response => {\n                // console.log(response.data)\n                const weatherdata = response.data\n                this.setState({ weatherdata: weatherdata })\n                this.getMonth();\n            }).catch((error) => {\n                console.log(\"error from get cities: \" + error)\n            })\n\n    }\n\n    getCityName(){\n        this.state.getcitiescode.map((currentcity)=>{\n            // console.log(currentcity.City)\n            return<option value={currentcity.City}>{currentcity.City}</option>\n        })\n\n    }\n\n    getMonth(){\n        this.state.weatherdata.map((data) =>{\n            const themonth = data[\"Date.fcst\"]\n            // console.log(themonth.substring(0, 7))\n            if (!this.state.MonthinYear.includes(themonth.substring(0, 7))) {\n                this.state.MonthinYear.push(themonth.substring(0, 7))\n            }\n        })\n    }\n\n    getCityCode() {\n        this.state.getcitiescode.map((currentcity) => {\n            if (currentcity.City == this.state.city) {\n                const currentcitycode = currentcity.Code\n                // console.log(currentcitycode)\n                this.setState({ currentcitycode: currentcitycode })\n            }\n        })\n    }\n\n    WeatherList() {\n        const filtermonth = this.state.weatherdata.filter(\n            (findmonth) =>{\n                console.log(findmonth[\"Date.fcst\"].includes(this.state.month))\n                return findmonth[\"Date.fcst\"].includes(this.state.month)\n            }\n        )\n\n        return filtermonth.map((data, index) => {\n\n            const citycode = this.state.currentcitycode\n            const MAXtemperature = \"TEMPMAX_fcast_\" + citycode\n            const MINtemperature = \"TEMPMIN_fcast_\" + citycode\n        // const AVAtemperature = \"TEMPMEDIA_fcast_\" + citycode\n            const rainfall = \"fcast_class_\" + citycode\n            const rainorno = \"rained_\" + citycode + \"_yN\"\n            const icon = \"icon_\" + citycode\n            \n            // console.log(data[\"Date.fcst\"])\n            return <WeatherCard \n            key={index} \n            data={data}  \n            MAXtemperature={data[MAXtemperature]}\n            MINtemperature={data[MINtemperature]}\n            rainfall={data[rainfall]} \n            rainorno={data[rainorno]}\n            icon = {data[icon]}\n            dateinyear={data[\"Date.fcst\"]}\n            />\n\n        })\n    }\n\n   OnChnageMonth(e){\n       this.setState({\n           month:e.target.value\n       })\n   }\n\n    OnChangeState(e) {\n        this.setState({\n            state: e.target.value\n        })\n    }\n\n    OnChnageCity(e) {\n        this.setState({\n            city: e.target.value\n        })\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        console.log(this.state.month)\n        console.log(this.state.city)\n        this.getCityCode()\n        this.WeatherList()\n    }\n\n    render() {\n        return (\n            <div >\n                {this.getMonth()}\n                <div className={style.formStyle}>\n                    <form onSubmit={this.onSubmit} >\n                        <div className=\"input-group mb-3\">\n                            <div className=\"input-group-prepend\">\n                                <label className=\"input-group-text\" htmlFor=\"inputTime\">Month</label>\n                            </div>\n                            <select className=\"custom-select\" id=\"inputTime\" value={this.state.month} onChange={this.OnChnageMonth}>\n                                <option selected>Choose...</option>\n                                {this.state.MonthinYear.map((month) => { return <option value={month}>{month}</option> })}\n                            </select>\n                        </div>\n\n                        {/* <div className=\"input-group mb-3\">\n                            <div className=\"input-group-prepend\">\n                                <label className=\"input-group-text\" htmlFor=\"inputstate\">State</label>\n                            </div>\n                            <select className=\"custom-select\" id=\"inputstate\">\n                                <option selected>Choose...</option>\n                                <option value=\"Brazil\">Brazil</option>\n                                <option value=\"Mongolia\">Mongolia</option>\n                                <option value=\"USA\">United State</option>\n                                <option value=\"Taiwan\">Taiwan</option>\n                            </select>\n                        </div> */}\n\n                        <div className=\"input-group mb-3\">\n                            <div className=\"input-group-prepend\">\n                                <label className=\"input-group-text\" htmlFor=\"inputCity\">City</label>\n                            </div>\n                            <select className=\"custom-select\" id=\"inputCity\" value={this.state.city} onChange={this.OnChnageCity}>\n                                <option selected>Choose...</option>\n                                {this.state.getcitiescode.map((allcity) => { return <option value={allcity.City}>{allcity.City}</option> })}\n                            </select>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <input type=\"submit\" value=\"search\"\n                                className=\"btn btn-primary\" />\n                        </div>\n                    </form>\n                </div>\n                {/* <h5>{this.state.city}</h5> */}\n                <h5>current city data</h5>\n                <div className=\"row\">\n                    {this.WeatherList()}\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}