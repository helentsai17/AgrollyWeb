{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/riskManagement/vegetableCard.js\";\nimport React, { Component } from 'react';\nexport default class VegetableCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      crop_name: props.vege.Crop_English,\n      Crop_Mongolian_name: props.vege.Crop_Mongolian,\n      Crop_Portuguese_name: props.vege.Crop_Portuguese,\n      Max_temp: props.vege.Geral_air_Temp_max,\n      Min_temp: props.vege.Geral_air_Temp_min,\n      growPeriod_Max: props.vege[\"Total.growing.period_days_max\"],\n      growPeriod_Min: props.vege[\"Total.growing.period_days_min\"],\n      cover: props.vege.Cover,\n      cityCode: props.mathdata,\n      selectMount: props.selectMount\n    };\n  }\n\n  getLong() {\n    axios.get('http://www.agrolly.tech/po_value.php').then(res => {\n      // console.log(res.data)\n      const po = res.data;\n      this.setState({\n        allcityLong: po\n      });\n      this.findcityLong();\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  findcityLong() {\n    const long = this.state.cityCode.slice(2);\n    return this.state.allcityLong.filter(citylong => {\n      if (citylong.city_long === long) {// console.log(citylong)\n        // this.setState({ citydata: citylong })\n      }\n    });\n  }\n\n  ETCrop() {\n    const placemonth = this.GetplaceMonth();\n    const Irrigation = placemonth;\n  }\n\n  GetplaceMonth() {\n    const month = this.state.selectMount;\n    const search = \"S_\" + month;\n    const placeCode = this.state.long_data;\n    console.log(placeCode);\n  } // ET crop selected month=   (pplace+month // selected the month and find in the long  (0.46 T2M selected month/place   // annual weather focast + 8) × Kccrop/1st number. //kc_month1: 0.45 for the first mont  (mm/day))*30\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, this.state.crop_name, \" | \", this.state.Crop_Portuguese_name, \" | \", this.state.Crop_Mongolian_name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, \"possible tolerant temperature: \", this.state.Min_temp, \".C~\", this.state.Max_temp, \".C \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, \"growing Period: \", this.state.growPeriod_Min, \"~\", this.state.growPeriod_Max), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, \"Cover: \", this.state.cover), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, this.state.selectMount), this.GetplaceMonth());\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/riskManagement/vegetableCard.js"],"names":["React","Component","VegetableCard","constructor","props","state","crop_name","vege","Crop_English","Crop_Mongolian_name","Crop_Mongolian","Crop_Portuguese_name","Crop_Portuguese","Max_temp","Geral_air_Temp_max","Min_temp","Geral_air_Temp_min","growPeriod_Max","growPeriod_Min","cover","Cover","cityCode","mathdata","selectMount","getLong","axios","get","then","res","po","data","setState","allcityLong","findcityLong","catch","error","console","log","long","slice","filter","citylong","city_long","ETCrop","placemonth","GetplaceMonth","Irrigation","month","search","placeCode","long_data","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n\n\n\nexport default class VegetableCard extends Component {\n\n    constructor(props){\n        super(props);\n        \n        this.state = {         \n            crop_name: props.vege.Crop_English,\n            Crop_Mongolian_name: props.vege.Crop_Mongolian,\n            Crop_Portuguese_name: props.vege.Crop_Portuguese,\n            Max_temp:props.vege.Geral_air_Temp_max,\n            Min_temp:props.vege.Geral_air_Temp_min,\n            growPeriod_Max:props.vege[\"Total.growing.period_days_max\"],\n            growPeriod_Min:props.vege[\"Total.growing.period_days_min\"],\n            cover:props.vege.Cover,\n            cityCode:props.mathdata,\n            selectMount:props.selectMount\n        }\n    }\n\n    getLong() {\n        axios.get('http://www.agrolly.tech/po_value.php')\n            .then(res => {\n                // console.log(res.data)\n                const po = res.data\n                this.setState({ allcityLong: po })\n                this.findcityLong()\n            }).catch(error => {\n                console.log(error)\n            })\n    }\n\n    findcityLong() {\n        const long = this.state.cityCode.slice(2)\n        return this.state.allcityLong.filter(citylong => {\n            if (citylong.city_long === long) {\n                // console.log(citylong)\n                // this.setState({ citydata: citylong })\n            }\n        })\n    }\n\n    ETCrop(){\n        const placemonth = this.GetplaceMonth();\n        const Irrigation = placemonth;\n    }\n\n    GetplaceMonth(){\n        const month = this.state.selectMount\n        const search = \"S_\"+month\n        const placeCode = this.state.long_data\n        console.log(placeCode);\n    }\n\n\n    // ET crop selected month=   (pplace+month // selected the month and find in the long  (0.46 T2M selected month/place   // annual weather focast + 8) × Kccrop/1st number. //kc_month1: 0.45 for the first mont  (mm/day))*30\n\n\n    \n    render() {\n        return (\n            <div>  \n                <h5>{this.state.crop_name} | {this.state.Crop_Portuguese_name} | {this.state.Crop_Mongolian_name}</h5>\n                <p>possible tolerant temperature: {this.state.Min_temp}.C~{this.state.Max_temp}.C </p>\n                <p>growing Period: {this.state.growPeriod_Min}~{this.state.growPeriod_Max}</p>\n                <p>Cover: {this.state.cover}</p>\n                <p>{this.state.selectMount}</p>\n                {this.GetplaceMonth()}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}