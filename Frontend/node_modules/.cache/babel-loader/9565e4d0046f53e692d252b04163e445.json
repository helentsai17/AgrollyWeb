{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/riskManagement/vegetableCard.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nexport default class VegetableCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      crop_name: props.vege.Crop_English,\n      Crop_Mongolian_name: props.vege.Crop_Mongolian,\n      Crop_Portuguese_name: props.vege.Crop_Portuguese,\n      Max_temp: props.vege.Geral_air_Temp_max,\n      Min_temp: props.vege.Geral_air_Temp_min,\n      growPeriod_Max: props.vege[\"Total.growing.period_days_max\"],\n      growPeriod_Min: props.vege[\"Total.growing.period_days_min\"],\n      cover: props.vege.Cover,\n      cityCode: props.cityCode,\n      selectMount: props.selectMount,\n      citydata: props.citydata,\n      weatherdata: []\n    };\n  }\n\n  componentDidMount() {\n    {\n      this.GetplaceMonth();\n    }\n    axios.get('http://agrolly.tech/annualForecast.php?country=Brazil').then(responsedata => {\n      // console.log(responsedata)\n      const weatherdata = responsedata.data;\n      this.setState({\n        weatherdata: weatherdata\n      });\n      this.getMonthTemp();\n    });\n  }\n\n  ETCrop() {\n    const placemonth = this.GetplaceMonth();\n    const Irrigation = placemonth;\n  }\n\n  GetplaceMonth() {\n    const NorS = this.state.cityCode.charAt(0);\n    const month = this.state.selectMount;\n    const search = \"S_\" + month;\n    const placeCode = this.state.citydata[search]; // console.log(placeCode);\n  }\n\n  getMonthTemp() {\n    let theMonth = this.state.selectMount;\n\n    if (theMonth < 0) {\n      theMonth = \"0\" + theMonth;\n    }\n\n    console.log(theMonth); // this.state.weatherdata.map((data) =>{\n    //     const themonth = data[\"Date.fcst\"]\n    //     // console.log(themonth.substring(0, 7))\n    //     if (!this.state.MonthinYear.includes(themonth.substring(0, 7))) {\n    //         this.state.MonthinYear.push(themonth.substring(0, 7))\n    //     }\n    // })\n  } // ET crop selected month=   (pplace+month // selected the month and find in the long  (0.46 T2M selected month/place   // annual weather focast + 8) × Kccrop/1st number. //kc_month1: 0.45 for the first mont  (mm/day))*30\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, this.state.crop_name, \" | \", this.state.Crop_Portuguese_name, \" | \", this.state.Crop_Mongolian_name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, \"possible tolerant temperature: \", this.state.Min_temp, \".C~\", this.state.Max_temp, \".C \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, \"growing Period: \", this.state.growPeriod_Min, \"~\", this.state.growPeriod_Max), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, \"Cover: \", this.state.cover), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, this.state.cityCode), this.GetplaceMonth());\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/riskManagement/vegetableCard.js"],"names":["React","Component","axios","VegetableCard","constructor","props","state","crop_name","vege","Crop_English","Crop_Mongolian_name","Crop_Mongolian","Crop_Portuguese_name","Crop_Portuguese","Max_temp","Geral_air_Temp_max","Min_temp","Geral_air_Temp_min","growPeriod_Max","growPeriod_Min","cover","Cover","cityCode","selectMount","citydata","weatherdata","componentDidMount","GetplaceMonth","get","then","responsedata","data","setState","getMonthTemp","ETCrop","placemonth","Irrigation","NorS","charAt","month","search","placeCode","theMonth","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\n\n\n\n\nexport default class VegetableCard extends Component {\n\n    constructor(props){\n        super(props);\n        \n        this.state = {         \n            crop_name: props.vege.Crop_English,\n            Crop_Mongolian_name: props.vege.Crop_Mongolian,\n            Crop_Portuguese_name: props.vege.Crop_Portuguese,\n            Max_temp:props.vege.Geral_air_Temp_max,\n            Min_temp:props.vege.Geral_air_Temp_min,\n            growPeriod_Max:props.vege[\"Total.growing.period_days_max\"],\n            growPeriod_Min:props.vege[\"Total.growing.period_days_min\"],\n            cover:props.vege.Cover,\n\n            cityCode:props.cityCode,\n            selectMount:props.selectMount,\n            citydata:props.citydata,\n\n            weatherdata:[]\n        }\n    }\n\n    componentDidMount(){\n        {this.GetplaceMonth()}\n        axios.get('http://agrolly.tech/annualForecast.php?country=Brazil')\n        .then(responsedata =>{\n            // console.log(responsedata)\n            const weatherdata = responsedata.data\n            this.setState({ weatherdata: weatherdata })\n            this.getMonthTemp();\n        })\n    }\n  \n    ETCrop(){\n        const placemonth = this.GetplaceMonth();\n        const Irrigation = placemonth;\n    }\n\n    GetplaceMonth(){\n        const NorS = this.state.cityCode.charAt(0)\n        const month = this.state.selectMount\n        const search = \"S_\"+ month\n        const placeCode = this.state.citydata[search]\n        // console.log(placeCode);\n     \n    }\n\n    getMonthTemp(){\n        let theMonth = this.state.selectMount\n        if(theMonth<0){\n            theMonth = \"0\"+theMonth\n        }\n        console.log(theMonth)\n        \n        // this.state.weatherdata.map((data) =>{\n        //     const themonth = data[\"Date.fcst\"]\n        //     // console.log(themonth.substring(0, 7))\n        //     if (!this.state.MonthinYear.includes(themonth.substring(0, 7))) {\n        //         this.state.MonthinYear.push(themonth.substring(0, 7))\n        //     }\n        // })\n    }\n\n    \n\n\n    // ET crop selected month=   (pplace+month // selected the month and find in the long  (0.46 T2M selected month/place   // annual weather focast + 8) × Kccrop/1st number. //kc_month1: 0.45 for the first mont  (mm/day))*30\n\n\n    \n    render() {\n        return (\n            <div>  \n                <h5>{this.state.crop_name} | {this.state.Crop_Portuguese_name} | {this.state.Crop_Mongolian_name}</h5>\n                <p>possible tolerant temperature: {this.state.Min_temp}.C~{this.state.Max_temp}.C </p>\n                <p>growing Period: {this.state.growPeriod_Min}~{this.state.growPeriod_Max}</p>\n                <p>Cover: {this.state.cover}</p>\n                <p>{this.state.cityCode}</p>\n                {this.GetplaceMonth()}\n                {/* {this.getLong()} */}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}