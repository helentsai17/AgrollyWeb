{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/riskManagement/riskpage.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport VegetablesCard from './vegetableCard';\nexport default class riskpage extends Component {\n  constructor(props) {\n    super(props);\n    const state = this.props.location.state.detail;\n    this.state = {\n      month: state.month,\n      po_place: state.po_place,\n      CityCode: state.CityCode,\n      vegetables: [],\n      allcityLong: [],\n      citydata: [],\n      weatherdata: [],\n      avaTemp: [],\n      monthava: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://www.agrolly.tech/po_value.php').then(res => {\n      // console.log(res.data)\n      const po = res.data;\n      this.setState({\n        allcityLong: po\n      });\n      this.findcityLong();\n    }).catch(error => {\n      console.log(error);\n    }); //get crop detail\n\n    axios.get('http://www.agrolly.tech/cropdata.php').then(res => {\n      // console.log(res.data)\n      const vegetables = res.data;\n      this.setState({\n        vegetables: vegetables\n      });\n    }).catch(error => {\n      console.log('error come from get crop api: ' + error);\n    });\n    axios.get('http://agrolly.tech/annualForecast.php?country=Brazil').then(responsedata => {\n      // console.log(responsedata)\n      const weatherdata = responsedata.data;\n      this.setState({\n        weatherdata: weatherdata\n      });\n    }); // {this.AverageTemp()}\n  }\n\n  findcityLong() {\n    const long = this.state.po_place.slice(2); // const NorS = this.state.po_place.subString(0)\n\n    return this.state.allcityLong.filter(citylong => {\n      if (citylong.city_long === long) {\n        // console.log(citylong)\n        this.setState({\n          citydata: citylong\n        });\n      }\n    });\n  }\n\n  vegetablesList() {\n    return this.state.vegetables.map((vege, index) => {\n      // console.log(vege)\n      return /*#__PURE__*/React.createElement(VegetablesCard, {\n        key: index,\n        vege: vege,\n        cityPo: this.state.po_place,\n        selectMount: this.state.month,\n        citydata: this.state.citydata,\n        CityCode: this.state.CityCode,\n        findavaTemp: this.AverageTemp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  AverageTemp(theMonth) {\n    if (theMonth < 10) {\n      theMonth = \"0\" + theMonth;\n    }\n\n    const thismonth = this.state.weatherdata.filter(monthdata => {\n      // console.log(monthdata[\"Date.fcst\"].substring(5, 7).includes(theMonth))\n      return monthdata[\"Date.fcst\"].substring(5, 7).includes(theMonth);\n    });\n    const month = 0; // const tempdata = [];\n\n    return thismonth.map(data => {\n      const AVAtemperature = \"TEMPMEDIA_fcast_\" + this.state.CityCode;\n      return this.state.monthava.push(data[AVAtemperature]);\n    });\n    var i;\n\n    for (i = 0; i < this.state.monthava.length; i++) {\n      month = this.state.monthava[i] + month;\n    }\n\n    console.log(month); // const monthava = this.state.weatherdata.filter(data => {\n    //     const date = data[\"Date.fcst\"]\n    //     const AVAtemperature = \"TEMPMEDIA_fcast_\" + this.state.CityCode\n    //     if (date.substring(5, 7).includes(theMonth)) {\n    //         return {}\n    //         // month = data[AVAtemperature] + month\n    //         // count++\n    //     }   \n    // })\n    // console.log(allavatemp)\n    // return monthava\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, this.vegetablesList());\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/riskManagement/riskpage.js"],"names":["React","Component","axios","VegetablesCard","riskpage","constructor","props","state","location","detail","month","po_place","CityCode","vegetables","allcityLong","citydata","weatherdata","avaTemp","monthava","componentDidMount","get","then","res","po","data","setState","findcityLong","catch","error","console","log","responsedata","long","slice","filter","citylong","city_long","vegetablesList","map","vege","index","AverageTemp","theMonth","thismonth","monthdata","substring","includes","AVAtemperature","push","i","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport VegetablesCard from './vegetableCard'\n\n\n\n\nexport default class riskpage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const state = this.props.location.state.detail;\n\n        this.state = {\n            month: state.month,\n            po_place: state.po_place,\n            CityCode: state.CityCode,\n\n            vegetables: [],\n            allcityLong: [],\n            citydata: [],\n\n            weatherdata: [],\n            avaTemp:[],\n\n            monthava:[],\n        }\n\n    }\n\n    componentDidMount() {\n        axios.get('http://www.agrolly.tech/po_value.php')\n            .then(res => {\n                // console.log(res.data)\n                const po = res.data\n                this.setState({ allcityLong: po })\n                this.findcityLong()\n            }).catch(error => {\n                console.log(error)\n            })\n\n        //get crop detail\n        axios.get('http://www.agrolly.tech/cropdata.php')\n            .then(res => {\n                // console.log(res.data)\n                const vegetables = res.data\n                this.setState({ vegetables: vegetables })\n            })\n            .catch(error => {\n                console.log('error come from get crop api: ' + error)\n            })\n        axios.get('http://agrolly.tech/annualForecast.php?country=Brazil')\n            .then(responsedata => {\n                // console.log(responsedata)\n                const weatherdata = responsedata.data\n                this.setState({ weatherdata: weatherdata })\n            })\n        // {this.AverageTemp()}\n    }\n\n\n    findcityLong() {\n        const long = this.state.po_place.slice(2)\n        // const NorS = this.state.po_place.subString(0)\n        return this.state.allcityLong.filter(citylong => {\n            if (citylong.city_long === long) {\n                // console.log(citylong)\n                this.setState({ citydata: citylong })\n            }\n        })\n    }\n\n    vegetablesList() {\n        return this.state.vegetables.map((vege, index) => {\n            // console.log(vege)\n            return <VegetablesCard\n                key={index}\n                vege={vege}\n                cityPo={this.state.po_place}\n                selectMount={this.state.month}\n                citydata={this.state.citydata} \n                CityCode={this.state.CityCode}\n                findavaTemp={this.AverageTemp}/>\n        })\n    }\n\n    AverageTemp(theMonth) {\n        if (theMonth < 10) {\n            theMonth = \"0\" + theMonth\n        }\n\n        const thismonth = this.state.weatherdata.filter((monthdata)=>{\n            // console.log(monthdata[\"Date.fcst\"].substring(5, 7).includes(theMonth))\n            return monthdata[\"Date.fcst\"].substring(5, 7).includes(theMonth)\n        })\n        const month =0;\n        // const tempdata = [];\n        return thismonth.map(data =>{\n            const AVAtemperature = \"TEMPMEDIA_fcast_\" + this.state.CityCode\n            return this.state.monthava.push(data[AVAtemperature])\n        })\n        \n        var i;\n        for(i = 0; i < this.state.monthava.length; i++){\n            month = this.state.monthava[i]+month\n        }\n\n        console.log(month)\n        \n        // const monthava = this.state.weatherdata.filter(data => {\n        //     const date = data[\"Date.fcst\"]\n        //     const AVAtemperature = \"TEMPMEDIA_fcast_\" + this.state.CityCode\n        //     if (date.substring(5, 7).includes(theMonth)) {\n        //         return {}\n        //         // month = data[AVAtemperature] + month\n        //         // count++\n        //     }   \n            \n        // })\n        // console.log(allavatemp)\n        // return monthava\n    }\n    \n\n\n\n    render() {\n        return (\n            <div>\n            {/* {this.state.avaTemp.map(test => <h2>{test}</h2>)} */}\n                {this.vegetablesList()}\n                {/* {this.AverageTemp(2)} */}\n                \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}