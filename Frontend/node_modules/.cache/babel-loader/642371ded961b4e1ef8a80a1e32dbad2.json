{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/riskManagement/riskpage.js\";\nimport React, { Component, useState } from 'react';\nimport axios from 'axios';\nimport VegetablesCard from './vegetableCard';\nexport default class riskpage extends Component {\n  constructor(props) {\n    super(props);\n    const state = this.props.location.state.detail;\n    this.state = {\n      month: state.month,\n      po_place: state.po_place,\n      CityCode: state.CityCode,\n      vegetables: [],\n      allcityLong: [],\n      citydata: [],\n      weatherdata: [],\n      avaTemp: [],\n      monthava: [],\n      getava1: \"\"\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://www.agrolly.tech/po_value.php').then(res => {\n      // console.log(res.data)\n      const po = res.data;\n      this.setState({\n        allcityLong: po\n      });\n      this.findcityLong();\n    }).catch(error => {\n      console.log(error);\n    }); //get crop detail\n\n    axios.get('http://www.agrolly.tech/cropdata.php').then(res => {\n      // console.log(res.data)\n      const vegetables = res.data;\n      this.setState({\n        vegetables: vegetables\n      });\n    }).catch(error => {\n      console.log('error come from get crop api: ' + error);\n    });\n    axios.get('http://agrolly.tech/annualForecast.php?country=Brazil').then(responsedata => {\n      // console.log(responsedata)\n      const weatherdata = responsedata.data;\n      this.setState({\n        weatherdata: weatherdata\n      });\n    }); // {this.AverageTemp()}\n  }\n\n  findcityLong() {\n    const long = this.state.po_place.slice(2); // const NorS = this.state.po_place.subString(0)\n\n    return this.state.allcityLong.filter(citylong => {\n      if (citylong.city_long === long) {\n        // console.log(citylong)\n        this.setState({\n          citydata: citylong\n        });\n      }\n    });\n  }\n\n  vegetablesList() {\n    return this.state.vegetables.map((vege, index) => {\n      // console.log(vege)\n      return /*#__PURE__*/React.createElement(VegetablesCard, {\n        key: index,\n        vege: vege,\n        cityPo: this.state.po_place,\n        selectMount: this.state.month,\n        citydata: this.state.citydata,\n        CityCode: this.state.CityCode,\n        findavaTemp: this.AverageTemp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  vegetablesList() {\n    return this.state.vegetables.map((vege, index) => {\n      // console.log(vege)\n      return /*#__PURE__*/React.createElement(VegetablesCard, {\n        key: index,\n        vege: vege,\n        cityPo: this.state.po_place,\n        selectMount: this.state.month,\n        citydata: this.state.citydata,\n        CityCode: this.state.CityCode,\n        findavaTemp: this.AverageTemp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  AverageTemp() {\n    let month1 = 0,\n        count1 = 0;\n    let month2 = 0,\n        count2 = 0;\n    let month3 = 0,\n        count3 = 0;\n    let month4 = 0,\n        count4 = 0;\n    let month5 = 0,\n        count5 = 0;\n    let month6 = 0,\n        count6 = 0;\n    let month7 = 0,\n        count7 = 0;\n    let month8 = 0,\n        count8 = 0;\n    let month9 = 0,\n        count9 = 0;\n    let month10 = 0,\n        count10 = 0;\n    let month11 = 0,\n        count11 = 0;\n    let month12 = 0,\n        count12 = 0;\n    const monthlyava = this.state.weatherdata.map(data => {\n      const date = data[\"Date.fcst\"]; // console.log(date)\n\n      const AVAtemperature = \"TEMPMEDIA_fcast_\" + this.state.CityCode; // console.log(data[AVAtemperature])\n\n      if (date.substring(5, 7).includes(\"01\")) {\n        month1 = data[AVAtemperature] + month1;\n        count1++;\n        const getava1 = month1 / count1;\n      } else if (date.substring(5, 7).includes(\"02\")) {\n        month2 = data[AVAtemperature] + month2;\n        count2++;\n      } else if (date.substring(5, 7).includes(\"03\")) {\n        month3 = data[AVAtemperature] + month3;\n        count3++;\n      } else if (date.substring(5, 7).includes(\"04\")) {\n        month4 = data[AVAtemperature] + month4;\n        count4++;\n      } else if (date.substring(5, 7).includes(\"05\")) {\n        month5 = data[AVAtemperature] + month5;\n        count5++;\n      } else if (date.substring(5, 7).includes(\"06\")) {\n        month6 = data[AVAtemperature] + month6;\n        count6++;\n      } else if (date.substring(5, 7).includes(\"07\")) {\n        month7 = data[AVAtemperature] + month7;\n        count7++;\n      } else if (date.substring(5, 7).includes(\"08\")) {\n        month8 = data[AVAtemperature] + month8;\n        count8++;\n      } else if (date.substring(5, 7).includes(\"09\")) {\n        month9 = data[AVAtemperature] + month9;\n        count9++;\n      } else if (date.substring(5, 7).includes(\"10\")) {\n        month10 = data[AVAtemperature] + month10;\n        count10++;\n      } else if (date.substring(5, 7).includes(\"11\")) {\n        month11 = data[AVAtemperature] + month11;\n        count11++;\n      } else if (date.substring(5, 7).includes(\"12\")) {\n        month12 = data[AVAtemperature] + month12;\n        count12++;\n      } //    this.setState({})\n\n    });\n    console.log(month1 / count1);\n    console.log(month3 / count3);\n    return monthlyava;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, this.vegetablesList(), this.AverageTemp());\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/riskManagement/riskpage.js"],"names":["React","Component","useState","axios","VegetablesCard","riskpage","constructor","props","state","location","detail","month","po_place","CityCode","vegetables","allcityLong","citydata","weatherdata","avaTemp","monthava","getava1","componentDidMount","get","then","res","po","data","setState","findcityLong","catch","error","console","log","responsedata","long","slice","filter","citylong","city_long","vegetablesList","map","vege","index","AverageTemp","month1","count1","month2","count2","month3","count3","month4","count4","month5","count5","month6","count6","month7","count7","month8","count8","month9","count9","month10","count10","month11","count11","month12","count12","monthlyava","date","AVAtemperature","substring","includes","render"],"mappings":"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","sourcesContent":["import React, { Component ,useState } from 'react';\nimport axios from 'axios'\nimport VegetablesCard from './vegetableCard'\n\n\n\n\nexport default class riskpage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const state = this.props.location.state.detail;\n\n        this.state = {\n            month: state.month,\n            po_place: state.po_place,\n            CityCode: state.CityCode,\n\n            vegetables: [],\n            allcityLong: [],\n            citydata: [],\n\n            weatherdata: [],\n            avaTemp:[],\n\n            monthava:[],\n\n            getava1:\"\"\n\n        }\n\n    }\n\n    componentDidMount() {\n        axios.get('http://www.agrolly.tech/po_value.php')\n            .then(res => {\n                // console.log(res.data)\n                const po = res.data\n                this.setState({ allcityLong: po })\n                this.findcityLong()\n            }).catch(error => {\n                console.log(error)\n            })\n\n        //get crop detail\n        axios.get('http://www.agrolly.tech/cropdata.php')\n            .then(res => {\n                // console.log(res.data)\n                const vegetables = res.data\n                this.setState({ vegetables: vegetables })\n            })\n            .catch(error => {\n                console.log('error come from get crop api: ' + error)\n            })\n        axios.get('http://agrolly.tech/annualForecast.php?country=Brazil')\n            .then(responsedata => {\n                // console.log(responsedata)\n                const weatherdata = responsedata.data\n                this.setState({ weatherdata: weatherdata })\n            })\n        // {this.AverageTemp()}\n    }\n\n\n    findcityLong() {\n        const long = this.state.po_place.slice(2)\n        // const NorS = this.state.po_place.subString(0)\n        return this.state.allcityLong.filter(citylong => {\n            if (citylong.city_long === long) {\n                // console.log(citylong)\n                this.setState({ citydata: citylong })\n            }\n        })\n    }\n\n    vegetablesList() {\n        return this.state.vegetables.map((vege, index) => {\n            // console.log(vege)\n            return <VegetablesCard\n                key={index}\n                vege={vege}\n                cityPo={this.state.po_place}\n                selectMount={this.state.month}\n                citydata={this.state.citydata} \n                CityCode={this.state.CityCode}\n                findavaTemp={this.AverageTemp}/>\n        })\n    }\n\n    vegetablesList() {\n        return this.state.vegetables.map((vege, index) => {\n            // console.log(vege)\n            return <VegetablesCard\n                key={index}\n                vege={vege}\n                cityPo={this.state.po_place}\n                selectMount={this.state.month}\n                citydata={this.state.citydata} \n                CityCode={this.state.CityCode}\n                findavaTemp={this.AverageTemp}/>\n        })\n    }\n\n    AverageTemp() {\n            let month1 =0, count1 = 0\n            let month2 =0, count2 = 0\n            let month3 =0, count3 = 0\n            let month4 =0, count4 = 0\n            let month5 =0, count5 = 0\n            let month6 =0, count6 = 0\n            let month7 =0, count7 = 0\n            let month8 =0, count8 = 0\n            let month9 =0, count9 = 0\n            let month10 =0, count10 = 0\n            let month11 =0, count11 = 0\n            let month12 =0, count12 = 0\n            \n            const monthlyava =  this.state.weatherdata.map(data => {\n                const date = data[\"Date.fcst\"]\n                // console.log(date)\n                const AVAtemperature = \"TEMPMEDIA_fcast_\" + this.state.CityCode\n                // console.log(data[AVAtemperature])\n                if(date.substring(5, 7).includes(\"01\")){\n                    month1 = data[AVAtemperature] + month1\n                    count1++\n                    const getava1 = month1/count1;\n                }else if(date.substring(5, 7).includes(\"02\")){\n                    month2 = data[AVAtemperature] + month2\n                    count2++\n                }else if(date.substring(5, 7).includes(\"03\")){\n                    month3 = data[AVAtemperature] + month3\n                    count3++\n                }else if(date.substring(5, 7).includes(\"04\")){\n                    month4 = data[AVAtemperature] + month4\n                    count4++\n                }else if(date.substring(5, 7).includes(\"05\")){\n                    month5 = data[AVAtemperature] + month5\n                    count5++\n                }else if(date.substring(5, 7).includes(\"06\")){\n                    month6 = data[AVAtemperature] + month6\n                    count6++\n                }else if(date.substring(5, 7).includes(\"07\")){\n                    month7 = data[AVAtemperature] + month7\n                    count7++\n                }else if(date.substring(5, 7).includes(\"08\")){\n                    month8 = data[AVAtemperature] + month8\n                    count8++\n                }else if(date.substring(5, 7).includes(\"09\")){\n                    month9 = data[AVAtemperature] + month9\n                    count9++\n                }else if(date.substring(5, 7).includes(\"10\")){\n                    month10 = data[AVAtemperature] + month10\n                    count10++\n                }else if(date.substring(5, 7).includes(\"11\")){\n                    month11 = data[AVAtemperature] + month11\n                    count11++\n                }else if(date.substring(5, 7).includes(\"12\")){\n                    month12 = data[AVAtemperature] + month12\n                    count12++\n                }\n            //    this.setState({})\n            })\n            console.log(month1/count1)\n            console.log(month3/count3)\n\n            return monthlyava\n                  \n        }\n\n\n\n    render() {\n        return (\n            <div>\n            {/* {this.state.avaTemp.map(test => <h2>{test}</h2>)} */}\n                {this.vegetablesList()}\n                {this.AverageTemp()}\n                \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}