{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/weatherPage/weeklyweather.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport WeeklyCard from './weeklyCard';\nexport default class weeklyweather extends Component {\n  constructor(props) {\n    super(props); // App State\n\n    this.state = {\n      lat: 0,\n      lng: 0,\n      IBMdata: [],\n      DayOFWeek: [],\n      temperatureMax: [],\n      temperatureMin: []\n    };\n  }\n\n  componentDidMount() {\n    const success = position => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      this.setState({\n        lat: latitude.toFixed(4),\n        lng: longitude.toFixed(4)\n      });\n    };\n\n    const error = () => {\n      console.log(\"Unable to retrieve your location\");\n    };\n\n    navigator.geolocation.getCurrentPosition(success, error);\n    const languageList = \"en-US\";\n    const APIkey = \"da328055e2e940d8b28055e2e9e0d851\";\n    axios.get('https://api.weather.com/v3/wx/forecast/daily/5day?geocode=' + this.state.lat + ',' + this.state.lng + '&format=json&units=m&language=' + languageList + '&apiKey=' + APIkey).then(response => {\n      console.log(response.data.daypart[0].iconCode);\n      this.setState({\n        DayOFWeek: response.data.dayOfWeek,\n        temperatureMax: response.data.temperatureMax,\n        temperatureMin: response.data.temperatureMin\n      });\n    });\n  }\n\n  weeklyweatherList() {\n    const alldata = this.state.IBMdata.dayOfWeek; // this.setState({ DayOFWeek: alldata})\n\n    console.log(alldata); // console.log(alldata.temperatureMax)\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, \"this page are for weekly weather\", /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, this.state.DayOFWeek[0]), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, this.state.lng), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, this.state.lat), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, this.state.DayOFWeek.map(day => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 53\n        }\n      }, day);\n    })), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, this.state.temperatureMax.map(temp => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 59\n        }\n      }, temp);\n    })), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, this.state.temperatureMin.map(temp => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 59\n        }\n      }, temp);\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/weatherPage/weeklyweather.js"],"names":["React","Component","axios","WeeklyCard","weeklyweather","constructor","props","state","lat","lng","IBMdata","DayOFWeek","temperatureMax","temperatureMin","componentDidMount","success","position","latitude","coords","longitude","setState","toFixed","error","console","log","navigator","geolocation","getCurrentPosition","languageList","APIkey","get","then","response","data","daypart","iconCode","dayOfWeek","weeklyweatherList","alldata","render","map","day","temp"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAGA,eAAe,MAAMC,aAAN,SAA4BH,SAA5B,CAAsC;AAEnDI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,GAAG,EAAE,CADM;AAEXC,MAAAA,GAAG,EAAE,CAFM;AAGXC,MAAAA,OAAO,EAAE,EAHE;AAIXC,MAAAA,SAAS,EAAC,EAJC;AAKXC,MAAAA,cAAc,EAAC,EALJ;AAMXC,MAAAA,cAAc,EAAC;AANJ,KAAb;AAQD;;AAEDC,EAAAA,iBAAiB,GAAG;AAElB,UAAMC,OAAO,GAAGC,QAAQ,IAAI;AAC1B,YAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAT,CAAgBD,QAAjC;AACA,YAAME,SAAS,GAAGH,QAAQ,CAACE,MAAT,CAAgBC,SAAlC;AAEA,WAAKC,QAAL,CAAc;AACZZ,QAAAA,GAAG,EAAES,QAAQ,CAACI,OAAT,CAAiB,CAAjB,CADO;AAEZZ,QAAAA,GAAG,EAAEU,SAAS,CAACE,OAAV,CAAkB,CAAlB;AAFO,OAAd;AAID,KARD;;AASA,UAAMC,KAAK,GAAG,MAAM;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACD,KAFD;;AAGAC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCZ,OAAzC,EAAkDO,KAAlD;AAGA,UAAMM,YAAY,GAAG,OAArB;AACA,UAAMC,MAAM,GAAG,kCAAf;AACA3B,IAAAA,KAAK,CAAC4B,GAAN,CAAU,+DAA+D,KAAKvB,KAAL,CAAWC,GAA1E,GAAgF,GAAhF,GAAsF,KAAKD,KAAL,CAAWE,GAAjG,GAAuG,gCAAvG,GAA0ImB,YAA1I,GAAyJ,UAAzJ,GAAsKC,MAAhL,EACGE,IADH,CACQC,QAAQ,IAAI;AAChBT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsB,CAAtB,EAAyBC,QAArC;AACA,WAAKf,QAAL,CAAc;AAAET,QAAAA,SAAS,EAAEqB,QAAQ,CAACC,IAAT,CAAcG,SAA3B;AACZxB,QAAAA,cAAc,EAACoB,QAAQ,CAACC,IAAT,CAAcrB,cADjB;AAEZC,QAAAA,cAAc,EAACmB,QAAQ,CAACC,IAAT,CAAcpB;AAFjB,OAAd;AAGD,KANH;AAOD;;AAEDwB,EAAAA,iBAAiB,GAAE;AACjB,UAAMC,OAAO,GAAG,KAAK/B,KAAL,CAAWG,OAAX,CAAmB0B,SAAnC,CADiB,CAEjB;;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAYc,OAAZ,EAHiB,CAIjB;AAED;;AAIDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKhC,KAAL,CAAWI,SAAX,CAAqB,CAArB,CAAN,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKJ,KAAL,CAAWE,GAAjB,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKF,KAAL,CAAWC,GAAjB,CAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKD,KAAL,CAAWI,SAAX,CAAqB6B,GAArB,CAAyBC,GAAG,IAAE;AAAC,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMA,GAAN,CAAP;AAAwB,KAAvD,CAAN,CALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKlC,KAAL,CAAWK,cAAX,CAA0B4B,GAA1B,CAA8BE,IAAI,IAAG;AAAC,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMA,IAAN,CAAP;AAAyB,KAA/D,CAAL,CANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKnC,KAAL,CAAWM,cAAX,CAA0B2B,GAA1B,CAA8BE,IAAI,IAAG;AAAC,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMA,IAAN,CAAP;AAAyB,KAA/D,CAAL,CAPF,CADF;AAaD;;AApEkD","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport WeeklyCard from './weeklyCard'\n\n\nexport default class weeklyweather extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // App State\n    this.state = {\n      lat: 0,\n      lng: 0,\n      IBMdata: [],\n      DayOFWeek:[],\n      temperatureMax:[],\n      temperatureMin:[],\n    }\n  };\n\n  componentDidMount() {\n\n    const success = position => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n\n      this.setState({\n        lat: latitude.toFixed(4),\n        lng: longitude.toFixed(4)\n      });\n    };\n    const error = () => {\n      console.log(\"Unable to retrieve your location\");\n    };\n    navigator.geolocation.getCurrentPosition(success, error);\n\n\n    const languageList = \"en-US\"\n    const APIkey = \"da328055e2e940d8b28055e2e9e0d851\"\n    axios.get('https://api.weather.com/v3/wx/forecast/daily/5day?geocode=' + this.state.lat + ',' + this.state.lng + '&format=json&units=m&language=' + languageList + '&apiKey=' + APIkey)\n      .then(response => {\n        console.log(response.data.daypart[0].iconCode)\n        this.setState({ DayOFWeek: response.data.dayOfWeek , \n          temperatureMax:response.data.temperatureMax, \n          temperatureMin:response.data.temperatureMin,})\n      })\n  }\n\n  weeklyweatherList(){\n    const alldata = this.state.IBMdata.dayOfWeek \n    // this.setState({ DayOFWeek: alldata})\n    console.log(alldata)\n    // console.log(alldata.temperatureMax)\n    \n  }\n\n\n\n  render() {\n    return (\n      <div>\n        this page are for weekly weather\n        <div>{this.state.DayOFWeek[0]}</div>\n        <div>{this.state.lng}</div>\n        <div>{this.state.lat}</div>\n        <div>{this.state.DayOFWeek.map(day=>{return <div>{day}</div>})}</div>\n        <h1>{this.state.temperatureMax.map(temp =>{return <div>{temp}</div>})}</h1>\n        <h1>{this.state.temperatureMin.map(temp =>{return <div>{temp}</div>})}</h1>\n        \n        {/* {this.weeklyweatherList()} */}\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}