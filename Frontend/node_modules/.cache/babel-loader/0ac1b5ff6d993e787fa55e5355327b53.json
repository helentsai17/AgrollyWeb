{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/riskManagement/riskpage.js\";\nimport React, { Component, useState } from 'react';\nimport axios from 'axios';\nimport VegetablesCard from './vegetableCard';\nexport default class riskpage extends Component {\n  constructor(props) {\n    super(props);\n    const state = this.props.location.state.detail;\n    this.state = {\n      month: state.month,\n      po_place: state.po_place,\n      CityCode: state.CityCode,\n      avg1: state.avg1,\n      avg2: state.avg2,\n      avg3: state.avg3,\n      avg4: state.avg4,\n      avg5: state.avg5,\n      avg6: state.avg6,\n      avg7: state.avg7,\n      avg8: state.avg8,\n      avg9: state.avg9,\n      avg10: state.avg10,\n      avg11: state.avg11,\n      avg12: state.avg12,\n      vegetables: [],\n      allcityLong: [],\n      citydata: [],\n      weatherdata: [],\n      avaTemp: [],\n      monthava: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://www.agrolly.tech/po_value.php').then(res => {\n      // console.log(res.data)\n      const po = res.data;\n      this.setState({\n        allcityLong: po\n      });\n      this.findcityLong();\n    }).catch(error => {\n      console.log(error);\n    }); //get crop detail\n\n    axios.get('http://www.agrolly.tech/cropdata.php').then(res => {\n      // console.log(res.data)\n      const vegetables = res.data;\n      this.setState({\n        vegetables: vegetables\n      });\n    }).catch(error => {\n      console.log('error come from get crop api: ' + error);\n    });\n  }\n\n  findcityLong() {\n    const long = this.state.po_place.slice(2); // const NorS = this.state.po_place.subString(0)\n\n    return this.state.allcityLong.filter(citylong => {\n      if (citylong.city_long === long) {\n        // console.log(citylong)\n        this.setState({\n          citydata: citylong\n        });\n      }\n    });\n    {\n      this.GetplaceMonth();\n    }\n  }\n\n  GetplaceMonth() {\n    const NorS = this.state.po_place.charAt(0); // console.log(NorS)\n\n    const themonth = this.state.month;\n    const search = NorS + \"_\" + themonth;\n    const placedata = this.state.citydata[search];\n    this.setState({\n      placedata: placedata\n    });\n    return placedata;\n  }\n\n  vegetablesList() {\n    return this.state.vegetables.map((vege, index) => {\n      // console.log(vege)\n      return /*#__PURE__*/React.createElement(VegetablesCard, {\n        key: index,\n        vege: vege,\n        cityPo: this.state.po_place,\n        selectMount: this.state.month,\n        citydata: this.state.citydata,\n        CityCode: this.state.CityCode,\n        findavaTemp: this.AverageTemp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  vegetablesList() {\n    return this.state.vegetables.map((vege, index) => {\n      // console.log(vege)\n      return /*#__PURE__*/React.createElement(VegetablesCard, {\n        key: index,\n        vege: vege,\n        cityPo: this.state.po_place,\n        selectMount: this.state.month,\n        citydata: this.state.citydata,\n        CityCode: this.state.CityCode,\n        findavaTemp: this.AverageTemp,\n        avg1: this.state.avg1,\n        avg2: this.state.avg2,\n        avg3: this.state.avg3,\n        avg4: this.state.avg4,\n        avg5: this.state.avg5,\n        avg6: this.state.avg6,\n        avg7: this.state.avg7,\n        avg8: this.state.avg8,\n        avg9: this.state.avg9,\n        avg10: this.state.avg10,\n        avg11: this.state.avg11,\n        avg12: this.state.avg12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, this.vegetablesList());\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/riskManagement/riskpage.js"],"names":["React","Component","useState","axios","VegetablesCard","riskpage","constructor","props","state","location","detail","month","po_place","CityCode","avg1","avg2","avg3","avg4","avg5","avg6","avg7","avg8","avg9","avg10","avg11","avg12","vegetables","allcityLong","citydata","weatherdata","avaTemp","monthava","componentDidMount","get","then","res","po","data","setState","findcityLong","catch","error","console","log","long","slice","filter","citylong","city_long","GetplaceMonth","NorS","charAt","themonth","search","placedata","vegetablesList","map","vege","index","AverageTemp","render"],"mappings":"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","sourcesContent":["import React, { Component ,useState } from 'react';\nimport axios from 'axios'\nimport VegetablesCard from './vegetableCard'\n\n\n\n\nexport default class riskpage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const state = this.props.location.state.detail;\n        this.state = {\n            month: state.month,\n            po_place: state.po_place,\n            CityCode: state.CityCode,\n            avg1: state.avg1,\n            avg2: state.avg2,\n            avg3: state.avg3,\n            avg4: state.avg4,\n            avg5: state.avg5,\n            avg6: state.avg6,\n            avg7: state.avg7,\n            avg8: state.avg8,\n            avg9: state.avg9,\n            avg10: state.avg10,\n            avg11: state.avg11,\n            avg12: state.avg12,\n\n            vegetables: [],\n            allcityLong: [],\n            citydata: [],\n\n            weatherdata: [],\n            avaTemp:[],\n\n            monthava:[],\n\n        }\n\n    }\n\n    componentDidMount() {\n        axios.get('http://www.agrolly.tech/po_value.php')\n            .then(res => {\n                // console.log(res.data)\n                const po = res.data\n                this.setState({ allcityLong: po })\n                this.findcityLong()\n            }).catch(error => {\n                console.log(error)\n            })\n\n        //get crop detail\n        axios.get('http://www.agrolly.tech/cropdata.php')\n            .then(res => {\n                // console.log(res.data)\n                const vegetables = res.data\n                this.setState({ vegetables: vegetables })\n            })\n            .catch(error => {\n                console.log('error come from get crop api: ' + error)\n            })\n    }\n\n\n    findcityLong() {\n        const long = this.state.po_place.slice(2)\n        // const NorS = this.state.po_place.subString(0)\n        return this.state.allcityLong.filter(citylong => {\n            if (citylong.city_long === long) {\n                // console.log(citylong)\n                this.setState({ citydata: citylong })\n            }\n        })\n\n        {this.GetplaceMonth()}\n    }\n\n    GetplaceMonth() {\n        const NorS = this.state.po_place.charAt(0)\n        // console.log(NorS)\n        const themonth = this.state.month\n        const search = NorS+\"_\" + themonth\n        const placedata = this.state.citydata[search]\n        this.setState({placedata:placedata})\n        return placedata\n    }\n\n    vegetablesList() {\n        return this.state.vegetables.map((vege, index) => {\n            // console.log(vege)\n            return <VegetablesCard\n                key={index}\n                vege={vege}\n                cityPo={this.state.po_place}\n                selectMount={this.state.month}\n                citydata={this.state.citydata} \n                CityCode={this.state.CityCode}\n                findavaTemp={this.AverageTemp}/>\n        })\n    }\n\n    vegetablesList() {\n        return this.state.vegetables.map((vege, index) => {\n            // console.log(vege)\n            return <VegetablesCard\n                key={index}\n                vege={vege}\n                cityPo={this.state.po_place}\n                selectMount={this.state.month}\n                citydata={this.state.citydata} \n                CityCode={this.state.CityCode}\n                findavaTemp={this.AverageTemp}\n                avg1 ={this.state.avg1}\n                avg2 ={this.state.avg2}\n                avg3 ={this.state.avg3}\n                avg4 ={this.state.avg4}\n                avg5 ={this.state.avg5}\n                avg6 ={this.state.avg6}\n                avg7 ={this.state.avg7}\n                avg8 ={this.state.avg8}\n                avg9 ={this.state.avg9}\n                avg10 ={this.state.avg10}\n                avg11 ={this.state.avg11}\n                avg12 ={this.state.avg12}\n                />\n        })\n    }\n\n\n    render() {\n        return (\n            <div>\n\n                {this.vegetablesList()}  \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}