{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/riskManagement/vegetableCard.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nexport default class VegetableCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      crop_name: props.vege.Crop_English,\n      Crop_Mongolian_name: props.vege.Crop_Mongolian,\n      Crop_Portuguese_name: props.vege.Crop_Portuguese,\n      Max_temp: props.vege.Geral_air_Temp_max,\n      Min_temp: props.vege.Geral_air_Temp_min,\n      growPeriod_Max: props.vege[\"Total.growing.period_days_max\"],\n      growPeriod_Min: props.vege[\"Total.growing.period_days_min\"],\n      cover: props.vege.Cover,\n      cityPo: props.cityPo,\n      selectMount: props.selectMount,\n      citydata: props.citydata,\n      CityCode: props.CityCode,\n      weatherdata: props.weatherdata\n    };\n  }\n\n  componentDidMount() {\n    {\n      this.GetplaceMonth();\n    }\n    const test = this.AverageTemp(this.state.selectMount);\n    console.log(this.state.weatherdata);\n  }\n\n  ETCrop() {\n    const placemonth = this.GetplaceMonth();\n    const Irrigation = placemonth;\n  }\n\n  GetplaceMonth() {\n    const NorS = this.state.cityPo.charAt(0);\n    const month = this.state.selectMount;\n    const search = \"S_\" + month;\n    const placeCode = this.state.citydata[search]; // console.log(placeCode);\n  }\n\n  AverageTemp(theMonth) {\n    if (theMonth < 10) {\n      theMonth = \"0\" + theMonth;\n    }\n\n    console.log(theMonth);\n    let month1 = 0,\n        count1 = 0;\n    return this.state.weatherdata.map(data => {\n      const date = data[\"Date.fcst\"];\n      const AVAtemperature = \"TEMPMEDIA_fcast_\" + this.state.CityCode;\n\n      if (date.substring(5, 7).includes(theMonth)) {\n        month1 = data[AVAtemperature] + month1;\n        count1++;\n        return month1 / count1;\n      }\n    });\n  } // ET crop selected month=   (pplace+month // selected the month and find in the long  (0.46 T2M selected month/place   // annual weather focast + 8) × Kccrop/1st number. //kc_month1: 0.45 for the first mont  (mm/day))*30\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, this.state.crop_name, \" | \", this.state.Crop_Portuguese_name, \" | \", this.state.Crop_Mongolian_name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, \"possible tolerant temperature: \", this.state.Min_temp, \".C~\", this.state.Max_temp, \".C \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, \"growing Period: \", this.state.growPeriod_Min, \"~\", this.state.growPeriod_Max), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, \"Cover: \", this.state.cover), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, this.state.cityCode), this.GetplaceMonth());\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/riskManagement/vegetableCard.js"],"names":["React","Component","axios","VegetableCard","constructor","props","state","crop_name","vege","Crop_English","Crop_Mongolian_name","Crop_Mongolian","Crop_Portuguese_name","Crop_Portuguese","Max_temp","Geral_air_Temp_max","Min_temp","Geral_air_Temp_min","growPeriod_Max","growPeriod_Min","cover","Cover","cityPo","selectMount","citydata","CityCode","weatherdata","componentDidMount","GetplaceMonth","test","AverageTemp","console","log","ETCrop","placemonth","Irrigation","NorS","charAt","month","search","placeCode","theMonth","month1","count1","map","data","date","AVAtemperature","substring","includes","render","cityCode"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAKA,eAAe,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AAEjDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAEF,KAAK,CAACG,IAAN,CAAWC,YADb;AAETC,MAAAA,mBAAmB,EAAEL,KAAK,CAACG,IAAN,CAAWG,cAFvB;AAGTC,MAAAA,oBAAoB,EAAEP,KAAK,CAACG,IAAN,CAAWK,eAHxB;AAITC,MAAAA,QAAQ,EAAET,KAAK,CAACG,IAAN,CAAWO,kBAJZ;AAKTC,MAAAA,QAAQ,EAAEX,KAAK,CAACG,IAAN,CAAWS,kBALZ;AAMTC,MAAAA,cAAc,EAAEb,KAAK,CAACG,IAAN,CAAW,+BAAX,CANP;AAOTW,MAAAA,cAAc,EAAEd,KAAK,CAACG,IAAN,CAAW,+BAAX,CAPP;AAQTY,MAAAA,KAAK,EAAEf,KAAK,CAACG,IAAN,CAAWa,KART;AAUTC,MAAAA,MAAM,EAAEjB,KAAK,CAACiB,MAVL;AAWTC,MAAAA,WAAW,EAAElB,KAAK,CAACkB,WAXV;AAYTC,MAAAA,QAAQ,EAAEnB,KAAK,CAACmB,QAZP;AAaTC,MAAAA,QAAQ,EAAEpB,KAAK,CAACoB,QAbP;AAeTC,MAAAA,WAAW,EAACrB,KAAK,CAACqB;AAfT,KAAb;AAiBH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AAAE,WAAKC,aAAL;AAAsB;AACxB,UAAMC,IAAI,GAAG,KAAKC,WAAL,CAAiB,KAAKxB,KAAL,CAAWiB,WAA5B,CAAb;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK1B,KAAL,CAAWoB,WAAvB;AACH;;AAEDO,EAAAA,MAAM,GAAG;AACL,UAAMC,UAAU,GAAG,KAAKN,aAAL,EAAnB;AACA,UAAMO,UAAU,GAAGD,UAAnB;AACH;;AAEDN,EAAAA,aAAa,GAAG;AACZ,UAAMQ,IAAI,GAAG,KAAK9B,KAAL,CAAWgB,MAAX,CAAkBe,MAAlB,CAAyB,CAAzB,CAAb;AACA,UAAMC,KAAK,GAAG,KAAKhC,KAAL,CAAWiB,WAAzB;AACA,UAAMgB,MAAM,GAAG,OAAOD,KAAtB;AACA,UAAME,SAAS,GAAG,KAAKlC,KAAL,CAAWkB,QAAX,CAAoBe,MAApB,CAAlB,CAJY,CAKZ;AAEH;;AAEDT,EAAAA,WAAW,CAACW,QAAD,EAAW;AAClB,QAAIA,QAAQ,GAAG,EAAf,EAAmB;AACfA,MAAAA,QAAQ,GAAG,MAAMA,QAAjB;AACH;;AACDV,IAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;AACA,QAAIC,MAAM,GAAG,CAAb;AAAA,QAAgBC,MAAM,GAAE,CAAxB;AAEA,WAAO,KAAKrC,KAAL,CAAWoB,WAAX,CAAuBkB,GAAvB,CAA2BC,IAAI,IAAI;AACtC,YAAMC,IAAI,GAAGD,IAAI,CAAC,WAAD,CAAjB;AACA,YAAME,cAAc,GAAG,qBAAqB,KAAKzC,KAAL,CAAWmB,QAAvD;;AAEA,UAAIqB,IAAI,CAACE,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqBC,QAArB,CAA8BR,QAA9B,CAAJ,EAA6C;AACzCC,QAAAA,MAAM,GAAGG,IAAI,CAACE,cAAD,CAAJ,GAAuBL,MAAhC;AACAC,QAAAA,MAAM;AACN,eAAOD,MAAM,GAACC,MAAd;AACH;AAEJ,KAVM,CAAP;AAWH,GA9DgD,CAmEjD;;;AAIAO,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAK5C,KAAL,CAAWC,SAAhB,SAA8B,KAAKD,KAAL,CAAWM,oBAAzC,SAAkE,KAAKN,KAAL,CAAWI,mBAA7E,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAmC,KAAKJ,KAAL,CAAWU,QAA9C,SAA2D,KAAKV,KAAL,CAAWQ,QAAtE,QAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAoB,KAAKR,KAAL,CAAWa,cAA/B,OAAgD,KAAKb,KAAL,CAAWY,cAA3D,CAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAW,KAAKZ,KAAL,CAAWc,KAAtB,CAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKd,KAAL,CAAW6C,QAAf,CALJ,EAMK,KAAKvB,aAAL,EANL,CADJ;AAWH;;AAnFgD","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\n\n\n\n\nexport default class VegetableCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            crop_name: props.vege.Crop_English,\n            Crop_Mongolian_name: props.vege.Crop_Mongolian,\n            Crop_Portuguese_name: props.vege.Crop_Portuguese,\n            Max_temp: props.vege.Geral_air_Temp_max,\n            Min_temp: props.vege.Geral_air_Temp_min,\n            growPeriod_Max: props.vege[\"Total.growing.period_days_max\"],\n            growPeriod_Min: props.vege[\"Total.growing.period_days_min\"],\n            cover: props.vege.Cover,\n\n            cityPo: props.cityPo,\n            selectMount: props.selectMount,\n            citydata: props.citydata,\n            CityCode: props.CityCode,\n\n            weatherdata:props.weatherdata\n        }\n    }\n\n    componentDidMount() {\n        { this.GetplaceMonth() }\n        const test = this.AverageTemp(this.state.selectMount)\n        console.log(this.state.weatherdata)\n    }\n\n    ETCrop() {\n        const placemonth = this.GetplaceMonth();\n        const Irrigation = placemonth;\n    }\n\n    GetplaceMonth() {\n        const NorS = this.state.cityPo.charAt(0)\n        const month = this.state.selectMount\n        const search = \"S_\" + month\n        const placeCode = this.state.citydata[search]\n        // console.log(placeCode);\n\n    }\n\n    AverageTemp(theMonth) {\n        if (theMonth < 10) {\n            theMonth = \"0\" + theMonth\n        }\n        console.log(theMonth)\n        let month1 = 0, count1 =0\n\n        return this.state.weatherdata.map(data => {\n            const date = data[\"Date.fcst\"]\n            const AVAtemperature = \"TEMPMEDIA_fcast_\" + this.state.CityCode\n            \n            if (date.substring(5, 7).includes(theMonth)) {\n                month1 = data[AVAtemperature] + month1\n                count1++\n                return month1/count1;\n            }   \n\n        })\n    }\n\n\n\n\n    // ET crop selected month=   (pplace+month // selected the month and find in the long  (0.46 T2M selected month/place   // annual weather focast + 8) × Kccrop/1st number. //kc_month1: 0.45 for the first mont  (mm/day))*30\n\n\n\n    render() {\n        return (\n            <div>\n                <h5>{this.state.crop_name} | {this.state.Crop_Portuguese_name} | {this.state.Crop_Mongolian_name}</h5>\n                <p>possible tolerant temperature: {this.state.Min_temp}.C~{this.state.Max_temp}.C </p>\n                <p>growing Period: {this.state.growPeriod_Min}~{this.state.growPeriod_Max}</p>\n                <p>Cover: {this.state.cover}</p>\n                <p>{this.state.cityCode}</p>\n                {this.GetplaceMonth()}\n                {/* {this.getLong()} */}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}