{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/Agrolly-Web/src/components/riskManagement/vegetableCard.js\";\nimport React, { Component } from 'react';\nimport style from './riskpage.module.css';\nexport default class VegetableCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      crop_name: props.vege.Crop_English,\n      Crop_Mongolian_name: props.vege.Crop_Mongolian,\n      Crop_Portuguese_name: props.vege.Crop_Portuguese,\n      Max_temp: props.vege.Geral_air_Temp_max,\n      Min_temp: props.vege.Geral_air_Temp_min,\n      growPeriod_Max: props.vege[\"Total.growing.period_days_max\"],\n      growPeriod_Min: props.vege[\"Total.growing.period_days_min\"],\n      cover: props.vege.Cover,\n      kc_month1: props.vege.kc_month1,\n      kc_month: props.vege,\n      avg1: props.avg1,\n      avg2: props.avg2,\n      avg3: props.avg3,\n      avg4: props.avg4,\n      avg5: props.avg5,\n      avg6: props.avg6,\n      avg7: props.avg7,\n      avg8: props.avg8,\n      avg9: props.avg9,\n      avg10: props.avg10,\n      avg11: props.avg11,\n      avg12: props.avg12,\n      rainfall1: props.rainfall1,\n      rainfall2: props.rainfall2,\n      rainfall3: props.rainfall3,\n      rainfall4: props.rainfall4,\n      rainfall5: props.rainfall5,\n      rainfall6: props.rainfall6,\n      rainfall7: props.rainfall7,\n      rainfall8: props.rainfall8,\n      rainfall9: props.rainfall9,\n      rainfall10: props.rainfall10,\n      rainfall11: props.rainfall11,\n      rainfall12: props.rainfall12,\n      selectMount: props.selectMount,\n      placedata: props.placedata,\n      citydata: props.citydata,\n      CityCode: props.CityCode,\n      po_place: props.po_place,\n      weatherdata: []\n    };\n  }\n\n  ETCrop() {\n    let mountparam = this.GetplaceMonth(this.state.selectMount);\n    const startmonth = \"avg\" + this.state.selectMount;\n    const rainmonth = \"rainfall\" + this.state.selectMount;\n    const predictrain = this.state[rainmonth];\n    const avaragetemp = this.state[startmonth];\n    const vegedata = this.state.kc_month1;\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30; // if(Irrigation<predictrain)\n\n    {\n      /* <div style={ Irrigation<predictrain ? { backgroundColor:'green'} : { backgroundColor:'red'}}>{Math.floor(Irrigation)}</div> */\n    }\n    return /*#__PURE__*/React.createElement(\"p\", {\n      style: Irrigation > predictrain ? {\n        \"backgroundColor\": \"red\"\n      } : {\n        \"backgroundColor\": \"green\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 16\n      }\n    }, Math.floor(Irrigation), \" |  \", predictrain);\n  }\n\n  ETCropsecond() {\n    let secondmonth = parseInt(this.state.selectMount) + 1;\n    if (secondmonth != 12) secondmonth = secondmonth % 12;\n    const mountparam = this.GetplaceMonth(secondmonth);\n    const startmonth = \"avg\" + secondmonth;\n    const rainmonth = \"rainfall\" + secondmonth;\n    const predictrain = this.state[rainmonth];\n    const avaragetemp = this.state[startmonth]; // console.log(startmonth)\n\n    const vegedata = this.state.kc_month.kc_month2;\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30;\n    return /*#__PURE__*/React.createElement(\"p\", {\n      style: Irrigation > predictrain ? {\n        \"backgroundColor\": \"red\"\n      } : {\n        \"backgroundColor\": \"green\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 16\n      }\n    }, Math.floor(Irrigation), \" |  \", predictrain);\n  }\n\n  ETCropThire() {\n    let thiremonth = parseInt(this.state.selectMount) + 2;\n    if (thiremonth != 12) thiremonth = thiremonth % 12;\n    const mountparam = this.GetplaceMonth(thiremonth);\n    const startmonth = \"avg\" + thiremonth;\n    const rainmonth = \"rainfall\" + thiremonth;\n    const predictrain = this.state[rainmonth];\n    const avaragetemp = this.state[startmonth]; // console.log(startmonth)\n\n    const vegedata = this.state.kc_month.kc_month3;\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30;\n\n    if (Irrigation !== 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        style: Irrigation > predictrain ? {\n          \"backgroundColor\": \"red\"\n        } : {\n          \"backgroundColor\": \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 20\n        }\n      }, Math.floor(Irrigation), \" |  \", predictrain);\n    } else {\n      return null;\n    }\n  }\n\n  ETCropFour() {\n    let fourmonth = parseInt(this.state.selectMount) + 3;\n    if (fourmonth != 12) fourmonth = fourmonth % 12;\n    const mountparam = this.GetplaceMonth(fourmonth);\n    const startmonth = \"avg\" + fourmonth;\n    const rainmonth = \"rainfall\" + fourmonth;\n    const predictrain = this.state[rainmonth];\n    const avaragetemp = this.state[startmonth]; // console.log(startmonth)\n\n    const vegedata = this.state.kc_month.kc_month4;\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30;\n\n    if (Irrigation !== 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        style: Irrigation > predictrain ? {\n          \"backgroundColor\": \"red\"\n        } : {\n          \"backgroundColor\": \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 20\n        }\n      }, Math.floor(Irrigation), \" |  \", predictrain);\n    } else {\n      return null;\n    }\n  }\n\n  ETCropFive() {\n    let fivemonth = parseInt(this.state.selectMount) + 4;\n    if (fivemonth != 12) fivemonth = fivemonth % 12;\n    const mountparam = this.GetplaceMonth(fivemonth);\n    const startmonth = \"avg\" + fivemonth;\n    const rainmonth = \"rainfall\" + fivemonth;\n    const predictrain = this.state[rainmonth];\n    const avaragetemp = this.state[startmonth]; // console.log(startmonth)\n\n    const vegedata = this.state.kc_month.kc_month5;\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30;\n\n    if (Irrigation !== 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        style: Irrigation > predictrain ? {\n          \"backgroundColor\": \"red\"\n        } : {\n          \"backgroundColor\": \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 19\n        }\n      }, Math.floor(Irrigation), \" |  \", predictrain);\n    } else {\n      return null;\n    }\n  }\n\n  ETCropSix() {\n    let sixmonth = parseInt(this.state.selectMount) + 5;\n    if (sixmonth != 12) sixmonth = sixmonth % 12;\n    const mountparam = this.GetplaceMonth(sixmonth);\n    const startmonth = \"avg\" + sixmonth;\n    const rainmonth = \"rainfall\" + sixmonth;\n    const predictrain = this.state[rainmonth];\n    const avaragetemp = this.state[startmonth]; // console.log(startmonth)\n\n    const vegedata = this.state.kc_month.kc_month6;\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30;\n\n    if (Irrigation !== 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        style: Irrigation > predictrain ? {\n          \"backgroundColor\": \"red\"\n        } : {\n          \"backgroundColor\": \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 20\n        }\n      }, Math.floor(Irrigation), \" |  \", predictrain);\n    } else {\n      return null;\n    }\n  }\n\n  ETCropSeven() {\n    let sevenmonth = parseInt(this.state.selectMount) + 6;\n    if (sevenmonth != 12) sevenmonth = sevenmonth % 12;\n    const mountparam = this.GetplaceMonth(sevenmonth);\n    const startmonth = \"avg\" + sevenmonth;\n    const rainmonth = \"rainfall\" + sevenmonth;\n    const predictrain = this.state[rainmonth];\n    const avaragetemp = this.state[startmonth]; // console.log(startmonth)\n\n    const vegedata = this.state.kc_month.kc_month7;\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30;\n\n    if (Irrigation !== 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        style: Irrigation > predictrain ? {\n          \"backgroundColor\": \"red\"\n        } : {\n          \"backgroundColor\": \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 20\n        }\n      }, Math.floor(Irrigation), \" |  \", predictrain);\n    } else {\n      return null;\n    }\n  }\n\n  ETCropEight() {\n    let eightmonth = parseInt(this.state.selectMount) + 7;\n    if (eightmonth != 12) eightmonth = eightmonth % 12;\n    const mountparam = this.GetplaceMonth(eightmonth);\n    const startmonth = \"avg\" + eightmonth;\n    const rainmonth = \"rainfall\" + eightmonth;\n    const predictrain = this.state[rainmonth];\n    console.log(rainmonth);\n    const avaragetemp = this.state[startmonth]; // console.log(startmonth)\n\n    const vegedata = this.state.kc_month.kc_month8;\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30;\n\n    if (Irrigation !== 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        style: Irrigation > predictrain ? {\n          \"backgroundColor\": \"red\"\n        } : {\n          \"backgroundColor\": \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 20\n        }\n      }, Math.floor(Irrigation), \" |  \", predictrain);\n    } else {\n      return null;\n    }\n  }\n\n  ETCropNine() {\n    let ninemonth = parseInt(this.state.selectMount) + 8;\n    if (ninemonth != 12) ninemonth = ninemonth % 12;\n    const mountparam = this.GetplaceMonth(ninemonth);\n    const startmonth = \"avg\" + ninemonth;\n    const rainmonth = \"rainfall\" + ninemonth;\n    const predictrain = this.state[rainmonth];\n    const avaragetemp = this.state[startmonth]; // console.log(startmonth)\n\n    const vegedata = this.state.kc_month.kc_month9;\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30;\n\n    if (Irrigation !== 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        style: Irrigation > predictrain ? {\n          \"backgroundColor\": \"red\"\n        } : {\n          \"backgroundColor\": \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 20\n        }\n      }, Math.floor(Irrigation), \" |  \", predictrain);\n    } else {\n      return null;\n    }\n  }\n\n  ETCropTen() {\n    let Tenmonth = parseInt(this.state.selectMount) + 9;\n    if (Tenmonth != 12) Tenmonth = Tenmonth % 12;\n    const mountparam = this.GetplaceMonth(Tenmonth);\n    const startmonth = \"avg\" + Tenmonth;\n    const rainmonth = \"rainfall\" + Tenmonth;\n    const predictrain = this.state[rainmonth];\n    const avaragetemp = this.state[startmonth]; // console.log(startmonth)\n\n    const vegedata = this.state.kc_month.kc_month10;\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30;\n\n    if (Irrigation !== 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        style: Irrigation > predictrain ? {\n          \"backgroundColor\": \"red\"\n        } : {\n          \"backgroundColor\": \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 20\n        }\n      }, Math.floor(Irrigation), \" |  \", predictrain);\n    } else {\n      return null;\n    }\n  }\n\n  ETCropEleven() {\n    let elevenmonth = parseInt(this.state.selectMount) + 10;\n    if (elevenmonth != 12) elevenmonth = elevenmonth % 12;\n    const mountparam = this.GetplaceMonth(elevenmonth);\n    const startmonth = \"avg\" + elevenmonth;\n    const rainmonth = \"rainfall\" + elevenmonth;\n    const predictrain = this.state[rainmonth];\n    const avaragetemp = this.state[startmonth]; // console.log(startmonth)\n\n    const vegedata = this.state.kc_month.kc_month11;\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30;\n\n    if (Irrigation !== 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        style: Irrigation > predictrain ? {\n          \"backgroundColor\": \"red\"\n        } : {\n          \"backgroundColor\": \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 20\n        }\n      }, Math.floor(Irrigation), \" |\", predictrain);\n    } else {\n      return null;\n    }\n  }\n\n  ETCropTwelve() {\n    let twelvemonth = parseInt(this.state.selectMount) + 11;\n    if (twelvemonth != 12) twelvemonth = twelvemonth % 12;\n    const mountparam = this.GetplaceMonth(twelvemonth);\n    const startmonth = \"avg\" + twelvemonth;\n    const rainmonth = \"rainfall\" + twelvemonth;\n    const predictrain = this.state[rainmonth];\n    const avaragetemp = this.state[startmonth]; // console.log(startmonth)\n\n    const vegedata = this.state.kc_month.kc_month12;\n    const Irrigation = mountparam * (0.46 * avaragetemp + 8) * vegedata * 30;\n\n    if (Irrigation !== 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        style: Irrigation > predictrain ? {\n          \"backgroundColor\": \"red\"\n        } : {\n          \"backgroundColor\": \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 20\n        }\n      }, Math.floor(Irrigation), \" |  \", predictrain);\n    } else {\n      return null;\n    }\n  } // first parameter \n\n\n  GetplaceMonth(month) {\n    const NorS = this.state.po_place.charAt(0);\n    const themonth = month;\n    const search = NorS + \"_\" + themonth;\n    const placeCode = this.state.citydata[search]; // console.log(placeCode)\n\n    return placeCode;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: style.vegetableCard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }\n    }, this.state.crop_name, \" | \", this.state.Crop_Portuguese_name, \" | \", this.state.Crop_Mongolian_name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }\n    }, \"possible tolerant temperature: \", this.state.Min_temp, \".C~\", this.state.Max_temp, \".C \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }\n    }, \"growing Period: \", this.state.growPeriod_Min, \"~\", this.state.growPeriod_Max), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }\n    }, \"Cover: \", this.state.cover), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }\n    }, this.state.cityCode), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }\n    }, this.ETCrop()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }\n    }, this.ETCropsecond()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }\n    }, this.ETCropThire()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }\n    }, this.ETCropFour()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }\n    }, this.ETCropFive()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }\n    }, this.ETCropSix()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }\n    }, this.ETCropSeven()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }\n    }, this.ETCropEight()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }\n    }, this.ETCropNine()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }\n    }, this.ETCropTen()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }\n    }, this.ETCropEleven()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }\n    }, this.ETCropTwelve()));\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/Agrolly-Web/src/components/riskManagement/vegetableCard.js"],"names":["React","Component","style","VegetableCard","constructor","props","state","crop_name","vege","Crop_English","Crop_Mongolian_name","Crop_Mongolian","Crop_Portuguese_name","Crop_Portuguese","Max_temp","Geral_air_Temp_max","Min_temp","Geral_air_Temp_min","growPeriod_Max","growPeriod_Min","cover","Cover","kc_month1","kc_month","avg1","avg2","avg3","avg4","avg5","avg6","avg7","avg8","avg9","avg10","avg11","avg12","rainfall1","rainfall2","rainfall3","rainfall4","rainfall5","rainfall6","rainfall7","rainfall8","rainfall9","rainfall10","rainfall11","rainfall12","selectMount","placedata","citydata","CityCode","po_place","weatherdata","ETCrop","mountparam","GetplaceMonth","startmonth","rainmonth","predictrain","avaragetemp","vegedata","Irrigation","Math","floor","ETCropsecond","secondmonth","parseInt","kc_month2","ETCropThire","thiremonth","kc_month3","ETCropFour","fourmonth","kc_month4","ETCropFive","fivemonth","kc_month5","ETCropSix","sixmonth","kc_month6","ETCropSeven","sevenmonth","kc_month7","ETCropEight","eightmonth","console","log","kc_month8","ETCropNine","ninemonth","kc_month9","ETCropTen","Tenmonth","kc_month10","ETCropEleven","elevenmonth","kc_month11","ETCropTwelve","twelvemonth","kc_month12","month","NorS","charAt","themonth","search","placeCode","render","vegetableCard","cityCode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport style from './riskpage.module.css'\n\nexport default class VegetableCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            crop_name: props.vege.Crop_English,\n            Crop_Mongolian_name: props.vege.Crop_Mongolian,\n            Crop_Portuguese_name: props.vege.Crop_Portuguese,\n            Max_temp: props.vege.Geral_air_Temp_max,\n            Min_temp: props.vege.Geral_air_Temp_min,\n            growPeriod_Max: props.vege[\"Total.growing.period_days_max\"],\n            growPeriod_Min: props.vege[\"Total.growing.period_days_min\"],\n            cover: props.vege.Cover,\n            kc_month1: props.vege.kc_month1,\n            kc_month:props.vege,\n            avg1: props.avg1,\n            avg2: props.avg2,\n            avg3: props.avg3,\n            avg4: props.avg4,\n            avg5: props.avg5,\n            avg6: props.avg6,\n            avg7: props.avg7,\n            avg8: props.avg8,\n            avg9: props.avg9,\n            avg10: props.avg10,\n            avg11: props.avg11,\n            avg12: props.avg12,\n\n            rainfall1: props.rainfall1,\n            rainfall2: props.rainfall2,\n            rainfall3: props.rainfall3,\n            rainfall4: props.rainfall4,\n            rainfall5: props.rainfall5,\n            rainfall6: props.rainfall6,\n            rainfall7: props.rainfall7,\n            rainfall8: props.rainfall8,\n            rainfall9: props.rainfall9,\n            rainfall10: props.rainfall10,\n            rainfall11: props.rainfall11,\n            rainfall12: props.rainfall12,\n\n            selectMount:props.selectMount,\n            placedata:props.placedata,\n            citydata: props.citydata,\n            CityCode: props.CityCode,\n            po_place:props.po_place,\n            weatherdata: [],\n        }\n    }\n\n \n\n    ETCrop() {\n        let mountparam = this.GetplaceMonth(this.state.selectMount)\n        const startmonth = \"avg\"+this.state.selectMount\n        const rainmonth = \"rainfall\"+ this.state.selectMount\n        const predictrain = this.state[rainmonth]\n        const avaragetemp = this.state[startmonth]\n        const vegedata = this.state.kc_month1   \n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        // if(Irrigation<predictrain)\n        {/* <div style={ Irrigation<predictrain ? { backgroundColor:'green'} : { backgroundColor:'red'}}>{Math.floor(Irrigation)}</div> */}\n        return <p style={Irrigation>predictrain ? { \"backgroundColor\": \"red\" }:{ \"backgroundColor\": \"green\" }}>{Math.floor(Irrigation)} |  {predictrain}</p>\n    }\n\n    ETCropsecond() {\n        let secondmonth = parseInt(this.state.selectMount)+1\n        if(secondmonth != 12) secondmonth = secondmonth%12\n        const mountparam = this.GetplaceMonth(secondmonth)\n        const startmonth = \"avg\"+ secondmonth\n        const rainmonth = \"rainfall\"+ secondmonth\n        const predictrain = this.state[rainmonth]\n        const avaragetemp = this.state[startmonth]\n        // console.log(startmonth)\n        const vegedata = this.state.kc_month.kc_month2 \n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        return <p style={Irrigation>predictrain ? { \"backgroundColor\": \"red\" }:{ \"backgroundColor\": \"green\" }}>{Math.floor(Irrigation)} |  {predictrain}</p>\n    }\n\n    ETCropThire() {\n        let thiremonth = parseInt(this.state.selectMount)+2\n        if(thiremonth != 12) thiremonth = thiremonth%12\n        const mountparam = this.GetplaceMonth(thiremonth)\n        const startmonth = \"avg\"+thiremonth\n        const rainmonth = \"rainfall\"+ thiremonth\n        const predictrain = this.state[rainmonth]\n        const avaragetemp = this.state[startmonth]\n        // console.log(startmonth)\n        const vegedata = this.state.kc_month.kc_month3 \n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        if(Irrigation !== 0){\n            return <p style={Irrigation>predictrain ? { \"backgroundColor\": \"red\" }:{ \"backgroundColor\": \"green\" }}>{Math.floor(Irrigation)} |  {predictrain}</p>\n        }else{\n            return null\n        }\n    }\n\n    ETCropFour() {\n        let fourmonth = (parseInt(this.state.selectMount)+3)\n        if(fourmonth != 12) fourmonth = fourmonth%12\n        const mountparam = this.GetplaceMonth(fourmonth)\n        const startmonth = \"avg\"+fourmonth\n        const rainmonth = \"rainfall\"+ fourmonth\n        const predictrain = this.state[rainmonth]\n        const avaragetemp = this.state[startmonth]\n        // console.log(startmonth)\n        const vegedata = this.state.kc_month.kc_month4\n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        if(Irrigation !== 0){\n            return <p style={Irrigation>predictrain ? { \"backgroundColor\": \"red\" }:{ \"backgroundColor\": \"green\" }}>{Math.floor(Irrigation)} |  {predictrain}</p>\n        }else{\n            return null\n        }\n        \n    }\n   \n    ETCropFive() {\n        let fivemonth = (parseInt(this.state.selectMount)+4)\n        if(fivemonth != 12) fivemonth = fivemonth%12\n        const mountparam = this.GetplaceMonth(fivemonth)\n        const startmonth = \"avg\"+fivemonth\n        const rainmonth = \"rainfall\"+ fivemonth\n        const predictrain = this.state[rainmonth]\n        const avaragetemp = this.state[startmonth]\n        // console.log(startmonth)\n        const vegedata = this.state.kc_month.kc_month5\n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        if(Irrigation !== 0){\n            return<p style={Irrigation>predictrain ? { \"backgroundColor\": \"red\" }:{ \"backgroundColor\": \"green\" }}>{Math.floor(Irrigation)} |  {predictrain}</p>\n        }else{\n            return null\n        }\n        \n    }\n\n    ETCropSix() {\n        let sixmonth = (parseInt(this.state.selectMount)+5)\n        if(sixmonth != 12) sixmonth = sixmonth%12\n        const mountparam = this.GetplaceMonth(sixmonth)\n        const startmonth = \"avg\"+sixmonth\n        const rainmonth = \"rainfall\"+ sixmonth\n        const predictrain = this.state[rainmonth]\n        const avaragetemp = this.state[startmonth]\n        // console.log(startmonth)\n        const vegedata = this.state.kc_month.kc_month6\n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        if(Irrigation !== 0){\n            return <p style={Irrigation>predictrain ? { \"backgroundColor\": \"red\" }:{ \"backgroundColor\": \"green\" }}>{Math.floor(Irrigation)} |  {predictrain}</p>\n        }else{\n            return null\n        }\n        \n    }\n    ETCropSeven(){\n        let sevenmonth = (parseInt(this.state.selectMount)+6)\n        if(sevenmonth != 12) sevenmonth = sevenmonth%12\n        const mountparam = this.GetplaceMonth(sevenmonth)\n        const startmonth = \"avg\"+sevenmonth\n        const rainmonth = \"rainfall\"+ sevenmonth\n        const predictrain = this.state[rainmonth]\n        const avaragetemp = this.state[startmonth]\n        // console.log(startmonth)\n        const vegedata = this.state.kc_month.kc_month7\n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        if(Irrigation !== 0){\n            return <p style={Irrigation>predictrain ? { \"backgroundColor\": \"red\" }:{ \"backgroundColor\": \"green\" }}>{Math.floor(Irrigation)} |  {predictrain}</p>\n        }else{\n            return null\n        }\n    }\n    \n    ETCropEight(){\n        let eightmonth = (parseInt(this.state.selectMount)+7)\n        if(eightmonth != 12) eightmonth = eightmonth%12\n        const mountparam = this.GetplaceMonth(eightmonth)\n        const startmonth = \"avg\"+eightmonth\n        const rainmonth = \"rainfall\"+ eightmonth\n        const predictrain = this.state[rainmonth]\n        console.log(rainmonth)\n        const avaragetemp = this.state[startmonth]\n        // console.log(startmonth)\n        const vegedata = this.state.kc_month.kc_month8\n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        if(Irrigation !== 0){\n            return <p style={Irrigation>predictrain ? { \"backgroundColor\": \"red\" }:{ \"backgroundColor\": \"green\" }}>{Math.floor(Irrigation)} |  {predictrain}</p>\n        }else{\n            return null\n        }\n    }\n\n    ETCropNine(){\n        let ninemonth = (parseInt(this.state.selectMount)+8)\n        if(ninemonth != 12) ninemonth = ninemonth%12\n        const mountparam = this.GetplaceMonth(ninemonth)\n        const startmonth = \"avg\"+ninemonth\n        const rainmonth = \"rainfall\"+ ninemonth\n        const predictrain = this.state[rainmonth]\n        const avaragetemp = this.state[startmonth]\n        // console.log(startmonth)\n        const vegedata = this.state.kc_month.kc_month9\n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        if(Irrigation !== 0){\n            return <p style={Irrigation>predictrain ? { \"backgroundColor\": \"red\" }:{ \"backgroundColor\": \"green\" }}>{Math.floor(Irrigation)} |  {predictrain}</p>\n        }else{\n            return null\n        }\n    }\n\n    ETCropTen(){\n        let Tenmonth = (parseInt(this.state.selectMount)+9)\n        if(Tenmonth != 12) Tenmonth = Tenmonth%12\n        const mountparam = this.GetplaceMonth(Tenmonth)\n        const startmonth = \"avg\"+Tenmonth\n        const rainmonth = \"rainfall\"+ Tenmonth\n        const predictrain = this.state[rainmonth]\n        const avaragetemp = this.state[startmonth]\n        // console.log(startmonth)\n        const vegedata = this.state.kc_month.kc_month10\n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        if(Irrigation !== 0){\n            return <p style={Irrigation>predictrain ? { \"backgroundColor\": \"red\" }:{ \"backgroundColor\": \"green\" }}>{Math.floor(Irrigation)} |  {predictrain}</p>\n        }else{\n            return null\n        }\n    }\n\n    ETCropEleven(){\n        let elevenmonth = (parseInt(this.state.selectMount)+10)\n        if(elevenmonth != 12) elevenmonth = elevenmonth%12\n        const mountparam = this.GetplaceMonth(elevenmonth)\n        const startmonth = \"avg\"+elevenmonth\n        const rainmonth = \"rainfall\"+ elevenmonth\n        const predictrain = this.state[rainmonth]\n        const avaragetemp = this.state[startmonth]\n        // console.log(startmonth)\n        const vegedata = this.state.kc_month.kc_month11\n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        if(Irrigation !== 0){\n            return <p style={Irrigation>predictrain ? { \"backgroundColor\": \"red\" }:{ \"backgroundColor\": \"green\" }}>{Math.floor(Irrigation)} |{predictrain}</p>\n        }else{\n            return null\n        }\n    }\n\n    ETCropTwelve(){\n        let twelvemonth = (parseInt(this.state.selectMount)+11)\n        if(twelvemonth != 12) twelvemonth = twelvemonth%12\n        const mountparam = this.GetplaceMonth(twelvemonth)\n        const startmonth = \"avg\"+twelvemonth\n        const rainmonth = \"rainfall\"+ twelvemonth\n        const predictrain = this.state[rainmonth]\n        const avaragetemp = this.state[startmonth]\n        // console.log(startmonth)\n        const vegedata = this.state.kc_month.kc_month12\n        const Irrigation = (mountparam * (0.46 * avaragetemp + 8) * vegedata) * 30\n        if(Irrigation !== 0){\n            return <p style={Irrigation>predictrain ? { \"backgroundColor\": \"red\" }:{ \"backgroundColor\": \"green\" }}>{Math.floor(Irrigation)} |  {predictrain}</p>\n        }else{\n            return null\n        }\n    }\n    // first parameter \n    GetplaceMonth(month) {\n        const NorS = this.state.po_place.charAt(0)\n        const themonth = month\n        const search = NorS+ \"_\" + themonth\n        const placeCode = this.state.citydata[search]\n        // console.log(placeCode)\n        return placeCode\n    }\n\n\n    render() {\n        return (\n            <div className ={style.vegetableCard}>\n                <h5>{this.state.crop_name} | {this.state.Crop_Portuguese_name} | {this.state.Crop_Mongolian_name}</h5>\n                <p>possible tolerant temperature: {this.state.Min_temp}.C~{this.state.Max_temp}.C </p>\n                <p>growing Period: {this.state.growPeriod_Min}~{this.state.growPeriod_Max}</p>\n                <p>Cover: {this.state.cover}</p>\n                <p>{this.state.cityCode}</p>\n                <div>{this.ETCrop()}</div>\n                <div>{this.ETCropsecond()}</div>\n                <div>{this.ETCropThire()}</div>\n                <div>{this.ETCropFour()}</div>\n                <div>{this.ETCropFive()}</div>\n                <div>{this.ETCropSix()}</div>\n                <div>{this.ETCropSeven()}</div>\n                <div>{this.ETCropEight()}</div>\n                <div>{this.ETCropNine()}</div>\n                <div>{this.ETCropTen()}</div>\n                <div>{this.ETCropEleven()}</div>\n                <div>{this.ETCropTwelve()}</div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}