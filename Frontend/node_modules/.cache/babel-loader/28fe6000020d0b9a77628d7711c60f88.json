{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/riskManagement/riskpage.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport VegetablesCard from './vegetableCard';\nexport default class riskpage extends Component {\n  constructor(props) {\n    super(props);\n    const state = this.props.location.state.detail;\n    this.state = {\n      month: state.month,\n      po_place: state.po_place,\n      CityCode: state.CityCode,\n      vegetables: [],\n      allcityLong: [],\n      citydata: [],\n      weatherdata: [],\n      avaTemp: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://www.agrolly.tech/po_value.php').then(res => {\n      // console.log(res.data)\n      const po = res.data;\n      this.setState({\n        allcityLong: po\n      });\n      this.findcityLong();\n    }).catch(error => {\n      console.log(error);\n    }); //get crop detail\n\n    axios.get('http://www.agrolly.tech/cropdata.php').then(res => {\n      // console.log(res.data)\n      const vegetables = res.data;\n      this.setState({\n        vegetables: vegetables\n      });\n    }).catch(error => {\n      console.log('error come from get crop api: ' + error);\n    });\n    axios.get('http://agrolly.tech/annualForecast.php?country=Brazil').then(responsedata => {\n      // console.log(responsedata)\n      const weatherdata = responsedata.data;\n      this.setState({\n        weatherdata: weatherdata\n      });\n    }); // {this.AverageTemp()}\n  }\n\n  findcityLong() {\n    const long = this.state.po_place.slice(2); // const NorS = this.state.po_place.subString(0)\n\n    return this.state.allcityLong.filter(citylong => {\n      if (citylong.city_long === long) {\n        // console.log(citylong)\n        this.setState({\n          citydata: citylong\n        });\n      }\n    });\n  }\n\n  vegetablesList() {\n    return this.state.vegetables.map((vege, index) => {\n      return /*#__PURE__*/React.createElement(VegetablesCard, {\n        key: index,\n        vege: vege,\n        cityPo: this.state.po_place,\n        selectMount: this.state.month,\n        citydata: this.state.citydata,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  AverageTemp() {\n    let theMonth = this.state.month;\n\n    if (theMonth < 10) {\n      theMonth = \"0\" + theMonth;\n    } // console.log(theMonth)\n\n\n    let month1 = 0,\n        count1 = 0;\n    let month2 = 0,\n        count2 = 0;\n    let month3 = 0,\n        count3 = 0;\n    let month4 = 0,\n        count4 = 0;\n    let month5 = 0,\n        count5 = 0;\n    let month6 = 0,\n        count6 = 0;\n    let month7 = 0,\n        count7 = 0;\n    let month8 = 0,\n        count8 = 0;\n    let month9 = 0,\n        count9 = 0;\n    let month10 = 0,\n        count10 = 0;\n    let month11 = 0,\n        count11 = 0;\n    let month12 = 0,\n        count12 = 0;\n    return this.state.weatherdata.filter(data => {\n      const date = data[\"Date.fcst\"]; // console.log(date)\n\n      const AVAtemperature = \"TEMPMEDIA_fcast_\" + this.state.CityCode; // console.log(data[AVAtemperature])\n\n      if (date.substring(5, 7).includes(\"01\")) {\n        month1 = data[AVAtemperature] + month1;\n        count1++;\n      } else if (date.substring(5, 7).includes(\"02\")) {\n        month2 = data[AVAtemperature] + month2;\n        count2++;\n      } else if (date.substring(5, 7).includes(\"03\")) {\n        month3 = data[AVAtemperature] + month3;\n        count3++;\n      } else if (date.substring(5, 7).includes(\"04\")) {\n        month4 = data[AVAtemperature] + month4;\n        count4++;\n      } else if (date.substring(5, 7).includes(\"05\")) {\n        month5 = data[AVAtemperature] + month5;\n        count5++;\n      } else if (date.substring(5, 7).includes(\"06\")) {\n        month6 = data[AVAtemperature] + month6;\n        count6++;\n      } else if (date.substring(5, 7).includes(\"07\")) {\n        month7 = data[AVAtemperature] + month7;\n        count7++;\n      } else if (date.substring(5, 7).includes(\"08\")) {\n        month8 = data[AVAtemperature] + month8;\n        count8++;\n      } else if (date.substring(5, 7).includes(\"09\")) {\n        month9 = data[AVAtemperature] + month9;\n        count9++;\n      } else if (date.substring(5, 7).includes(\"10\")) {\n        month10 = data[AVAtemperature] + month10;\n        count10++;\n      } else if (date.substring(5, 7).includes(\"11\")) {\n        month11 = data[AVAtemperature] + month11;\n        count11++;\n      } else if (date.substring(5, 7).includes(\"12\")) {\n        month12 = data[AVAtemperature] + month12;\n        count12++;\n      }\n\n      this.state.avaTemp.push(month1 / count1);\n      this.state.avaTemp.push(month2 / count2);\n      this.state.avaTemp.push(month3 / count3);\n      this.state.avaTemp.push(month4 / count4);\n      this.state.avaTemp.push(month5 / count5);\n      this.state.avaTemp.push(month6 / count6);\n      this.state.avaTemp.push(month7 / count7);\n      this.state.avaTemp.push(month8 / count8);\n      this.state.avaTemp.push(month9 / count9);\n      this.state.avaTemp.push(month10 / count10);\n      this.state.avaTemp.push(month11 / count11);\n      this.state.avaTemp.push(month12 / count12);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }, this.vegetablesList(), this.AverageTemp(), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, this.state.avaTemp.map(test => {\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 60\n        }\n      }, test);\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/riskManagement/riskpage.js"],"names":["React","Component","axios","VegetablesCard","riskpage","constructor","props","state","location","detail","month","po_place","CityCode","vegetables","allcityLong","citydata","weatherdata","avaTemp","componentDidMount","get","then","res","po","data","setState","findcityLong","catch","error","console","log","responsedata","long","slice","filter","citylong","city_long","vegetablesList","map","vege","index","AverageTemp","theMonth","month1","count1","month2","count2","month3","count3","month4","count4","month5","count5","month6","count6","month7","count7","month8","count8","month9","count9","month10","count10","month11","count11","month12","count12","date","AVAtemperature","substring","includes","push","render","test"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport VegetablesCard from './vegetableCard'\n\n\n\n\nexport default class riskpage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const state = this.props.location.state.detail;\n\n        this.state = {\n            month: state.month,\n            po_place: state.po_place,\n            CityCode: state.CityCode,\n\n            vegetables: [],\n            allcityLong: [],\n            citydata: [],\n\n            weatherdata: [],\n            avaTemp:[]\n        }\n\n    }\n\n    componentDidMount() {\n        axios.get('http://www.agrolly.tech/po_value.php')\n            .then(res => {\n                // console.log(res.data)\n                const po = res.data\n                this.setState({ allcityLong: po })\n                this.findcityLong()\n            }).catch(error => {\n                console.log(error)\n            })\n\n        //get crop detail\n        axios.get('http://www.agrolly.tech/cropdata.php')\n            .then(res => {\n                // console.log(res.data)\n                const vegetables = res.data\n                this.setState({ vegetables: vegetables })\n            })\n            .catch(error => {\n                console.log('error come from get crop api: ' + error)\n            })\n        axios.get('http://agrolly.tech/annualForecast.php?country=Brazil')\n            .then(responsedata => {\n                // console.log(responsedata)\n                const weatherdata = responsedata.data\n                this.setState({ weatherdata: weatherdata })\n            })\n        // {this.AverageTemp()}\n    }\n\n\n    findcityLong() {\n        const long = this.state.po_place.slice(2)\n        // const NorS = this.state.po_place.subString(0)\n        return this.state.allcityLong.filter(citylong => {\n            if (citylong.city_long === long) {\n                // console.log(citylong)\n                this.setState({ citydata: citylong })\n            }\n        })\n    }\n\n    vegetablesList() {\n        return this.state.vegetables.map((vege, index) => {\n            return <VegetablesCard\n                key={index}\n                vege={vege}\n                cityPo={this.state.po_place}\n                selectMount={this.state.month}\n                citydata={this.state.citydata} />\n        })\n    }\n\n    AverageTemp() {\n\n        let theMonth = this.state.month\n            if(theMonth<10){\n                theMonth = \"0\"+theMonth\n            }\n            // console.log(theMonth)\n        let month1 =0, count1 = 0\n        let month2 =0, count2 = 0\n        let month3 =0, count3 = 0\n        let month4 =0, count4 = 0\n        let month5 =0, count5 = 0\n        let month6 =0, count6 = 0\n        let month7 =0, count7 = 0\n        let month8 =0, count8 = 0\n        let month9 =0, count9 = 0\n        let month10 =0, count10 = 0\n        let month11 =0, count11 = 0\n        let month12 =0, count12 = 0\n        return this.state.weatherdata.filter(data => {\n            const date = data[\"Date.fcst\"]\n            // console.log(date)\n            const AVAtemperature = \"TEMPMEDIA_fcast_\" + this.state.CityCode\n            // console.log(data[AVAtemperature])\n            if(date.substring(5, 7).includes(\"01\")){\n                month1 = data[AVAtemperature] + month1\n                count1++\n            }else if(date.substring(5, 7).includes(\"02\")){\n                month2 = data[AVAtemperature] + month2\n                count2++\n            }else if(date.substring(5, 7).includes(\"03\")){\n                month3 = data[AVAtemperature] + month3\n                count3++\n            }else if(date.substring(5, 7).includes(\"04\")){\n                month4 = data[AVAtemperature] + month4\n                count4++\n            }else if(date.substring(5, 7).includes(\"05\")){\n                month5 = data[AVAtemperature] + month5\n                count5++\n            }else if(date.substring(5, 7).includes(\"06\")){\n                month6 = data[AVAtemperature] + month6\n                count6++\n            }else if(date.substring(5, 7).includes(\"07\")){\n                month7 = data[AVAtemperature] + month7\n                count7++\n            }else if(date.substring(5, 7).includes(\"08\")){\n                month8 = data[AVAtemperature] + month8\n                count8++\n            }else if(date.substring(5, 7).includes(\"09\")){\n                month9 = data[AVAtemperature] + month9\n                count9++\n            }else if(date.substring(5, 7).includes(\"10\")){\n                month10 = data[AVAtemperature] + month10\n                count10++\n            }else if(date.substring(5, 7).includes(\"11\")){\n                month11 = data[AVAtemperature] + month11\n                count11++\n            }else if(date.substring(5, 7).includes(\"12\")){\n                month12 = data[AVAtemperature] + month12\n                count12++\n            }\n            this.state.avaTemp.push(month1/count1)\n            this.state.avaTemp.push(month2/count2)\n            this.state.avaTemp.push(month3/count3)\n            this.state.avaTemp.push(month4/count4)\n            this.state.avaTemp.push(month5/count5)\n            this.state.avaTemp.push(month6/count6)\n            this.state.avaTemp.push(month7/count7)\n            this.state.avaTemp.push(month8/count8)\n            this.state.avaTemp.push(month9/count9)\n            this.state.avaTemp.push(month10/count10)\n            this.state.avaTemp.push(month11/count11)\n            this.state.avaTemp.push(month12/count12)\n        })\n        \n        \n    }\n\n\n\n    render() {\n        return (\n            <div>\n                {this.vegetablesList()}\n                {this.AverageTemp()}\n                <h2>{this.state.avaTemp.map(test =>{return <h2>{test}</h2>})}</h2>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}