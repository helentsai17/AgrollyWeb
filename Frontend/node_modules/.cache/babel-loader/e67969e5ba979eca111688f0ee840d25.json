{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/riskManagement/riskpage.js\";\nimport React, { Component, useState } from 'react';\nimport axios from 'axios';\nimport VegetablesCard from './vegetableCard';\nimport style from './riskpage.module.css';\nexport default class riskpage extends Component {\n  constructor(props) {\n    super(props);\n    const state = this.props.location.state.detail;\n    this.state = {\n      month: state.month,\n      po_place: state.po_place,\n      CityCode: state.CityCode,\n      avg1: state.avg1,\n      avg2: state.avg2,\n      avg3: state.avg3,\n      avg4: state.avg4,\n      avg5: state.avg5,\n      avg6: state.avg6,\n      avg7: state.avg7,\n      avg8: state.avg8,\n      avg9: state.avg9,\n      avg10: state.avg10,\n      avg11: state.avg11,\n      avg12: state.avg12,\n      rainfall1: state.rainfall1,\n      rainfall2: state.rainfall2,\n      rainfall3: state.rainfall3,\n      rainfall4: state.rainfall4,\n      rainfall5: state.rainfall5,\n      rainfall6: state.rainfall6,\n      rainfall7: state.rainfall7,\n      rainfall8: state.rainfall8,\n      rainfall9: state.rainfall9,\n      rainfall10: state.rainfall10,\n      rainfall11: state.rainfall11,\n      rainfall12: state.rainfall12,\n      vegetables: [],\n      allcityLong: [],\n      citydata: [],\n      weatherdata: [],\n      avaTemp: [],\n      placedata: \"\",\n      monthava: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://www.agrolly.tech/po_value.php').then(res => {\n      // console.log(res.data)\n      const po = res.data;\n      this.setState({\n        allcityLong: po\n      });\n      this.findcityLong();\n      this.GetplaceMonth();\n    }).catch(error => {\n      console.log(error);\n    }); //get crop detail\n\n    axios.get('http://www.agrolly.tech/cropdata.php').then(res => {\n      // console.log(res.data)\n      const vegetables = res.data;\n      this.setState({\n        vegetables: vegetables\n      });\n    }).catch(error => {\n      console.log('error come from get crop api: ' + error);\n    });\n  }\n\n  findcityLong() {\n    const long = this.state.po_place.slice(2);\n    return this.state.allcityLong.filter(citylong => {\n      if (citylong.city_long === long) {\n        // console.log(citylong)\n        this.setState({\n          citydata: citylong\n        });\n      }\n    });\n  }\n\n  vegetablesList() {\n    return this.state.vegetables.map((vege, index) => {\n      // console.log(vege)\n      return /*#__PURE__*/React.createElement(VegetablesCard, {\n        key: index,\n        vege: vege,\n        placedata: this.state.placedata,\n        citydata: this.state.citydata,\n        po_place: this.state.po_place,\n        selectMount: this.state.month,\n        avg1: this.state.avg1,\n        avg2: this.state.avg2,\n        avg3: this.state.avg3,\n        avg4: this.state.avg4,\n        avg5: this.state.avg5,\n        avg6: this.state.avg6,\n        avg7: this.state.avg7,\n        avg8: this.state.avg8,\n        avg9: this.state.avg9,\n        avg10: this.state.avg10,\n        avg11: this.state.avg11,\n        avg12: this.state.avg12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: style.riskbackground,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, this.vegetablesList());\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/riskManagement/riskpage.js"],"names":["React","Component","useState","axios","VegetablesCard","style","riskpage","constructor","props","state","location","detail","month","po_place","CityCode","avg1","avg2","avg3","avg4","avg5","avg6","avg7","avg8","avg9","avg10","avg11","avg12","rainfall1","rainfall2","rainfall3","rainfall4","rainfall5","rainfall6","rainfall7","rainfall8","rainfall9","rainfall10","rainfall11","rainfall12","vegetables","allcityLong","citydata","weatherdata","avaTemp","placedata","monthava","componentDidMount","get","then","res","po","data","setState","findcityLong","GetplaceMonth","catch","error","console","log","long","slice","filter","citylong","city_long","vegetablesList","map","vege","index","render","riskbackground"],"mappings":"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","sourcesContent":["import React, { Component ,useState } from 'react';\nimport axios from 'axios'\nimport VegetablesCard from './vegetableCard'\nimport style from './riskpage.module.css'\n\n\n\nexport default class riskpage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const state = this.props.location.state.detail;\n        this.state = {\n            month: state.month,\n            po_place: state.po_place,\n            CityCode: state.CityCode,\n            avg1: state.avg1,\n            avg2: state.avg2,\n            avg3: state.avg3,\n            avg4: state.avg4,\n            avg5: state.avg5,\n            avg6: state.avg6,\n            avg7: state.avg7,\n            avg8: state.avg8,\n            avg9: state.avg9,\n            avg10: state.avg10,\n            avg11: state.avg11,\n            avg12: state.avg12,\n\n            rainfall1: state.rainfall1,\n            rainfall2: state.rainfall2,\n            rainfall3: state.rainfall3,\n            rainfall4: state.rainfall4,\n            rainfall5: state.rainfall5,\n            rainfall6: state.rainfall6,\n            rainfall7: state.rainfall7,\n            rainfall8: state.rainfall8,\n            rainfall9: state.rainfall9,\n            rainfall10: state.rainfall10,\n            rainfall11: state.rainfall11,\n            rainfall12: state.rainfall12,\n\n            vegetables: [],\n            allcityLong: [],\n            citydata: [],\n\n            weatherdata: [],\n            avaTemp:[],\n            placedata:\"\",\n            monthava:[],\n\n        }\n\n    }\n\n    componentDidMount() {\n        axios.get('http://www.agrolly.tech/po_value.php')\n            .then(res => {\n                // console.log(res.data)\n                const po = res.data\n                this.setState({ allcityLong: po })\n                this.findcityLong()\n                this.GetplaceMonth()\n            }).catch(error => {\n                console.log(error)\n            })\n\n        //get crop detail\n        axios.get('http://www.agrolly.tech/cropdata.php')\n            .then(res => {\n                // console.log(res.data)\n                const vegetables = res.data\n                this.setState({ vegetables: vegetables })\n            })\n            .catch(error => {\n                console.log('error come from get crop api: ' + error)\n            })\n    }\n\n\n    findcityLong() {\n        const long = this.state.po_place.slice(2)\n        return this.state.allcityLong.filter(citylong => {\n            if (citylong.city_long === long) {\n                // console.log(citylong)\n                this.setState({ citydata: citylong })\n            }\n        })\n\n    }\n\n\n\n    vegetablesList() {\n        return this.state.vegetables.map((vege, index) => {\n            // console.log(vege)\n            return <VegetablesCard\n                key={index}\n                vege={vege}\n                placedata = {this.state.placedata}\n                citydata={this.state.citydata} \n                po_place ={this.state.po_place}\n                selectMount = {this.state.month}\n                avg1 ={this.state.avg1}\n                avg2 ={this.state.avg2}\n                avg3 ={this.state.avg3}\n                avg4 ={this.state.avg4}\n                avg5 ={this.state.avg5}\n                avg6 ={this.state.avg6}\n                avg7 ={this.state.avg7}\n                avg8 ={this.state.avg8}\n                avg9 ={this.state.avg9}\n                avg10 ={this.state.avg10}\n                avg11 ={this.state.avg11}\n                avg12 ={this.state.avg12}\n                />\n        })\n    }\n\n\n    render() {\n        return (\n            <div className={style.riskbackground}>\n                {this.vegetablesList()}  \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}