{"ast":null,"code":"var _jsxFileName = \"/Users/helentsai/agrolly-shop/src/components/riskManagement/vegetableCard.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nexport default class VegetableCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      crop_name: props.vege.Crop_English,\n      Crop_Mongolian_name: props.vege.Crop_Mongolian,\n      Crop_Portuguese_name: props.vege.Crop_Portuguese,\n      Max_temp: props.vege.Geral_air_Temp_max,\n      Min_temp: props.vege.Geral_air_Temp_min,\n      growPeriod_Max: props.vege[\"Total.growing.period_days_max\"],\n      growPeriod_Min: props.vege[\"Total.growing.period_days_min\"],\n      cover: props.vege.Cover,\n      kc_month1: props.vege.kc_month1,\n      cityPo: props.cityPo,\n      selectMount: props.selectMount,\n      citydata: props.citydata,\n      CityCode: props.CityCode,\n      weatherdata: []\n    };\n  }\n\n  componentDidMount() {\n    {\n      this.GetplaceMonth();\n    }\n  }\n\n  ETCrop() {\n    function doSomething() {\n      const themonth = this.state.selectMount;\n      const search = \"S_\" + themonth;\n      const placeCode = this.state.citydata[search]; // console.log(placeCode)\n    }\n\n    ;\n    console.log(doSomething.placeCode);\n    const avaragetemp = 20;\n    const vegedata = this.state.kc_month1; // const Irrigation = firtparam * (0.46 * avaragetemp + 8) * vegedata\n    // console.log(Irrigation);\n\n    return Irrigation;\n  } // first parameter \n\n\n  GetplaceMonth() {\n    // const NorS = this.state.cityPo.charAt(0)\n    const themonth = this.state.selectMount;\n    const search = \"S_\" + themonth;\n    const placeCode = this.state.citydata[search]; // console.log(placeCode)\n\n    return placeCode;\n  } // ET crop selected month=   (pplace+month // selected the month and find in the long  (0.46 T2M selected month/place   // annual weather focast + 8) × Kccrop/1st number. //kc_month1: 0.45 for the first mont  (mm/day))*30\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, this.state.crop_name, \" | \", this.state.Crop_Portuguese_name, \" | \", this.state.Crop_Mongolian_name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, \"possible tolerant temperature: \", this.state.Min_temp, \".C~\", this.state.Max_temp, \".C \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, \"growing Period: \", this.state.growPeriod_Min, \"~\", this.state.growPeriod_Max), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, \"Cover: \", this.state.cover), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, this.state.cityCode), this.GetplaceMonth(), this.ETCrop());\n  }\n\n}","map":{"version":3,"sources":["/Users/helentsai/agrolly-shop/src/components/riskManagement/vegetableCard.js"],"names":["React","Component","axios","VegetableCard","constructor","props","state","crop_name","vege","Crop_English","Crop_Mongolian_name","Crop_Mongolian","Crop_Portuguese_name","Crop_Portuguese","Max_temp","Geral_air_Temp_max","Min_temp","Geral_air_Temp_min","growPeriod_Max","growPeriod_Min","cover","Cover","kc_month1","cityPo","selectMount","citydata","CityCode","weatherdata","componentDidMount","GetplaceMonth","ETCrop","doSomething","themonth","search","placeCode","console","log","avaragetemp","vegedata","Irrigation","render","cityCode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\n\n\n\n\nexport default class VegetableCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            crop_name: props.vege.Crop_English,\n            Crop_Mongolian_name: props.vege.Crop_Mongolian,\n            Crop_Portuguese_name: props.vege.Crop_Portuguese,\n            Max_temp: props.vege.Geral_air_Temp_max,\n            Min_temp: props.vege.Geral_air_Temp_min,\n            growPeriod_Max: props.vege[\"Total.growing.period_days_max\"],\n            growPeriod_Min: props.vege[\"Total.growing.period_days_min\"],\n            cover: props.vege.Cover,\n            kc_month1: props.vege.kc_month1,\n\n            cityPo: props.cityPo,\n            selectMount: props.selectMount,\n            citydata: props.citydata,\n            CityCode: props.CityCode,\n\n            weatherdata: [],\n        }\n    }\n\n    componentDidMount() {\n        { this.GetplaceMonth() }\n\n    }\n\n    ETCrop() {\n        function doSomething(){\n            const themonth = this.state.selectMount\n            const search = \"S_\" + themonth\n            const placeCode = this.state.citydata[search]\n            // console.log(placeCode)\n        };\n        console.log(doSomething.placeCode);\n        const avaragetemp = 20\n        const vegedata = this.state.kc_month1\n        // const Irrigation = firtparam * (0.46 * avaragetemp + 8) * vegedata\n        // console.log(Irrigation);\n        return Irrigation\n    }\n\n    // first parameter \n    GetplaceMonth() {\n        // const NorS = this.state.cityPo.charAt(0)\n        const themonth = this.state.selectMount\n        const search = \"S_\" + themonth\n        const placeCode = this.state.citydata[search]\n        // console.log(placeCode)\n        return placeCode\n    }\n\n\n\n    // ET crop selected month=   (pplace+month // selected the month and find in the long  (0.46 T2M selected month/place   // annual weather focast + 8) × Kccrop/1st number. //kc_month1: 0.45 for the first mont  (mm/day))*30\n\n\n\n    render() {\n        return (\n            <div>\n                <h5>{this.state.crop_name} | {this.state.Crop_Portuguese_name} | {this.state.Crop_Mongolian_name}</h5>\n                <p>possible tolerant temperature: {this.state.Min_temp}.C~{this.state.Max_temp}.C </p>\n                <p>growing Period: {this.state.growPeriod_Min}~{this.state.growPeriod_Max}</p>\n                <p>Cover: {this.state.cover}</p>\n                <p>{this.state.cityCode}</p>\n                {this.GetplaceMonth()}\n                {this.ETCrop()}\n\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}